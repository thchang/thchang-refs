% A very thorough textbook on properties and algorithms for computing Voronoi tesselations and Delaunay triangulations, and the duality relationship between them. Covers basic and advanced properties of each and their duality, basic algorithms for computing each in two and three dimensions and their time and space complexities, all basic algorithms for computing each in high dimensions, and finally some algorithms and definitions for working in generalized metric spaces. Finally, some common applications of each are mentioned
@book{aurenhammer2013voronoi,
	author = {Aurenhammer, Franz and Klein, Rolf and Lee, Der-Tsai},
	title = {Voronoi diagrams and {D}elaunay triangulations},
	year = {2013},
	publisher = {World Scientific Publishing Co.},
	address = {Hackensack, NJ, USA},
}

% The Quickhull algorithm and corresponding numerical software package is one of the best algorithms for computing convex hulls in high dimensions. Since Delaunay triangulations can be obtained by lifting to d+1 dimensional parabola and computing its lower convex hull, Quickhull can also be used to obtain Delaunay triangulations and convex hulls. This is the standard and baseline for high-dimensional Delaunay triangulation, although it seldom scales past 6-7 dimensions before a memory failure occurs, unless the data set is extremely small (exponential time and space complexity in dimension). However, for problems that Quickhull can solve, it's often the fastest and most robust solution. This is also the official reference for the authors' corresponding open source C++ software, which is the default method for Delaunay triangulation and piecewise linear interpolation in scipy.spatial and scipy.interpolate, respectively
@article{barber1996quickhull,
	author = {Barber, C. Bradford and Dobkin, David P. and Huhdanpaa, Hannu},
	title = {The {Q}uickhull algorithm for convex hulls},
	year = {1996},
	journal = {ACM Transactions on Mathematical Software},
	volume = {22},
	number = {4},
	pages = {469--483},
}

% A method for constructing Delaunay triangulations incrementally in medium to high dimensions. The key is to only store the Delaunay graph instead of the entire triangulation in order to get around storage issues. Then, simplices are either retrieved from a cache or reconstructed upon request. This dodges the curse of dimensionality in the spatial sense, but the time complexity of constructing the graph is still exponential since they do so by computing every simplex in the triangulation and storing the edges. This is the method used in CGAL, a standard numerical software package for using computational geometry data structures and algorithms in perfect precision (via symbolic arithmetic). CGAL is a header-only open source C++ library
@inproceedings{boissonnat2009incremental,
	author = {Boissonnat, Jean-Daniel and Devillers, Olivier and Hornus, Samuel},
	title = {Incremental construction of the {D}elaunay triangulation and the {D}elaunay graph in medium dimension},
	year = {2009},
	month = {6},
	booktitle = {Proceedings of the Twenty-fifth Annual Symposium on Computational Geometry (SCG '09)},
	pages = {208--216},
	organization = {ACM},
	location = {Aarhus, Denmark},
	doi = {10.1145/1542362.1542403},
	url = {https://dl.acm.org/doi/10.1145/1542362.1542403},
}

% The Bowyer-Watson algorithm is one of the first algorithms for computing Delaunay triangulations in arbitrary dimensions. It is not particularly scalable, but a first step toward thinking about Delaunay triangulation in more than 3D. Was published by both Bowyer and Watson in the same issue of the same journal, with a footnote from the publisher that they both submitted at the same time and after investigation, it was determined that this was purely coincidental and no plagiarism was involved. Therefore, both papers were published together and both authors are credited equally for discovery
@article{bowyer1981computing,
	author = {Bowyer, Adrian},
	title = {Computing {D}irichlet tessellations},
	year = {1981},
	month = {2},
	journal = {The Computer Journal},
	volume = {24},
	number = {2},
	pages = {162--166},
	publisher = {Oxford University Press (OUP)},
	doi = {10.1093/comjnl/24.2.162},
	url = {https://academic.oup.com/comjnl/article-lookup/doi/10.1093/comjnl/24.2.162},
	issn = {0010-4620},
}

% The famous textbook on convex optimization (from which I learned most
% concepts) covering concepts such as basic convexity definitions and theorems,
% basic algorithms and optimality conditions, handling constraints, Lagrangian
% duality, multiobjective optimization basics, gradient descent and newton's
% method, sequential quadratic programming, linear programming, and a few
% applications and modeling basics
@book{boyd2004convex,
  title={Convex optimization},
  author={Boyd, Stephen P and Vandenberghe, Lieven},
  year={2004},
  publisher={Cambridge university press}
}

% An algorithm paper on how to compute the umbrella neighborhood of a single
% point in the Delaunay triangulation.  The idea is to sample a single vertex,
% generate a single simplex using DelaunaySparse, then pivot across open facets
% without dropping the center point.  We pivot until we've closed all open
% facets (therefore, we need to keep track of all open facets).  This algorithm
% works beautifully for points in general position, but often fails for
% degenerate sets since we may sample points from conflicting triangulations,
% therefore failing to close all facets.  It was abandoned in favor of
% computing the Delaunay graph when creating VTMOP.
@inproceedings{chang2018computing,
	author = {Chang, Tyler H. and Watson, Layne T. and Lux, Tyler C. H. and Raghvendra, Sharath and Li, Bo and Xu, Li and Butt, Ali R. and Cameron, Kirk W. and Hong, Yili},
	title = {Computing the umbrella neighbourhood of a vertex in the {D}elaunay triangulation and a single {V}oronoi cell in arbitrary dimension},
	year = {2018},
	month = {4},
	booktitle = {Proceedings of IEEE SoutheastCon 2018},
	numpages = {8},
	organization = {IEEE},
	location = {St. Petersburg, FL, USA},
	doi = {10.1109/secon.2018.8479003},
	url = {https://ieeexplore.ieee.org/document/8479003},
}

% The official publication for the DelaunaySparse algorithm -- but not the software. This is where the most thorough algorithm analysis and proof of correctness is published -- implementation details and handilng numerical degeneracy are briefly touched on but not detailed (and not yet finalized) until the submission of the TOMS paper
@inproceedings{chang2018polynomial,
	author = {Chang, Tyler H. and Watson, Layne T. and Lux, Thomas C. H. and Li, Bo and Xu, Li and Butt, Ali R. and Cameron, Kirk W. and Hong, Yili},
	title = {A polynomial time algorithm for multivariate interpolation in arbitrary dimension via the {D}elaunay triangulation},
	year = {2018},
	month = {3},
	booktitle = {Proceedings of the 2018 ACM Southeast Conference (ACMSE '18)},
	articleno = {12},
	organization = {ACM},
	location = {Richmond, KY, USA},
	doi = {10.1145/3190645.3190680},
	url = {https://dl.acm.org/doi/10.1145/3190645.3190680},
}

% Interpolation errors and runtimes and an early version of the DelaunaySparse algorithm is applied to a HPC performance modeling application
@inproceedings{chang2018predicting,
	author = {Chang, Tyler H. and Watson, Layne T. and Lux, Thomas C. H. and Bernard, Jon and Li, Bo and Xu, Li and Back, Godmar and Butt, Ali R. and Cameron, Kirk W. and Hong, Yili},
	title = {Predicting system performance by interpolation using a high-dimensional {D}elaunay triangulation},
	year = {2018},
	booktitle = {Proceedings of the 2018 Spring Simulation Conference (SpringSim 2018), the 26th High Performance Computing Symposium (HPC '18)},
	articleno = {2},
	organization = {SCS},
	location = {Baltimore, MD, USA},
}

% The DelaunaySparse software, demonstrates how to calculate simplices from a Delauay triangulation in very high dimensions scalably (and in parallel) using a highly customized simplex method like solver. The resulting Fortran numerical software is fully open source with a C and Python interface
@article{chang2020algorithm,
	author = {Chang, Tyler H. and Watson, Layne T. and Lux, Thomas C. H. and Butt, Ali R. and Cameron, Kirk W. and Hong, Yili},
	title = {Algorithm 1012: {DELAUNAYSPARSE}: Interpolation via a Sparse Subset of the {D}elaunay Triangulation in Medium to High Dimensions},
	year = {2020},
	month = {12},
	journal = {ACM Trans. Math. Softw.},
	volume = {46},
	number = {4},
	articleno = {38},
	numpages = {20},
	publisher = {ACM},
	address = {New York, NY, USA},
	doi = {10.1145/3422818},
	url = {https://dl.acm.org/doi/10.1145/3422818},
	issn = {0098-3500},
}

% My PhD thesis, including multiobjective optimization techniques, algorithm, performance analysis, and software review; description of VTMOP, running parallel simulations, integrating with libE. Also scientific machine learning via Delaunay interpolation and algorithms and proofs for doing so. Several applications related to HPC performance modeling and autotuning.
@phdthesis{chang2020mathematical,
	author = {Chang, Tyler H.},
	title = {Mathematical Software for Multiobjective Optimization Problems},
	year = {2020},
	school = {Virginia Tech, Dept. of Computer Science},
	url = {https://vtechworks.lib.vt.edu/handle/10919/98915},
}

% A great article on the optimality of Delaunay triangulations for
% interpolation.  The authors show that the Delaunay triangulation can be
% equivalently defined as the interpolation mesh that minimizes interpolation
% error for the perfect quadratic function f(x) = <x, x>.  Then, they explore
% how we can define new metrics to yield a new Delaunay triangulation that is
% optimal for an arbitrary function.  Ultimatey, it is hard to compute such
% Delaunay triangulations, so they explore relaxations and definitions of
% "nearly optimal" Delaunay triangulations.
@article{chen2004optimal,
	author = {Chen, Long and Xu, Jin-chao},
	title = {Optimal {D}elaunay triangulations},
	year = {2004},
	journal = {Journal of Computational Mathematics},
	volume = {22},
	number = {2},
	pages = {299--308},
}

% Another textbook on Delaunay triangulations in the context of mesh generation. This book is less thorough than the book by Aurenhammer in terms of theory, but a bit more complete in its coverage and analysis of modern algorithms, including the often forgotten gift-wrapping algorithm, which forms the basis for several operations in DelaunaySparse. This book also has some interesting algorithms and analysis that are specific to mesh generation.
@book{cheng2012delaunay,
	author = {Cheng, Siu-Wing and Dey, Tamal K. and Shewchuk, Jonathan R.},
	title = {Delaunay Mesh Generation},
	year = {2012},
	series = {Computer and Information Science Series},
	publisher = {CRC Press},
	address = {Boca Raton, FL, USA},
}

% An approximation algorithm for computing Czech complexes (a type of
% approximation to Delaunay triangulations) which may be scalble to high
% dimensions
@article{choudhary2019polynomialsized,
	author = {Choudhary, Aruni and Kerber, Michael and Raghvendra, Sharath},
	title = {Polynomial-sized topological approximations using the permutahedron},
	year = {2019},
	month = {1},
	journal = {Discrete \& Computational Geometry},
	volume = {61},
	number = {1},
	pages = {42--80},
	publisher = {Springer Science and Business Media LLC},
	doi = {10.1007/s00454-017-9951-2},
	url = {http://link.springer.com/10.1007/s00454-017-9951-2},
	issn = {0179-5376},
}

% The DeWall algorithm is a divide-and-conquer algorithm for computing Delaunay triangulations in arbitrary dimensions. The idea is to build a wall of Delaunay simplices bisecting the space using a variation of the gift-wrapping algorithm. Then, each half can be triangulated separately (and possibly in parallel) an attempt to reproduce these results and parallelize the algorithm was what originally spawned the idea for DelaunaySparse
@article{cignoni1998dewall,
	author = {Cignoni, Paolo and Montani, Claudio and Scopigno, Roberto},
	title = {{DeWall}: A fast divide and conquer {D}elaunay triangulation algorithm in {$\mathbb{E}^d$}},
	year = {1998},
	month = {4},
	journal = {Computer-Aided Design},
	volume = {30},
	number = {5},
	pages = {333--341},
	publisher = {Elsevier BV},
	doi = {10.1016/s0010-4485(97)00082-1},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0010448597000821},
	issn = {0010-4485},
}

% Dantzig's original (landmark) textbook on solving linear programming problems via the simplex method. This was obviously a landmark achievement in how to solve linear programming problems and more generally in the field of numerical optimization
@book{dantzig1998linear,
	author = {Dantzig, George B.},
	title = {Linear Programming and Extensions},
	year = {1998},
	series = {Princeton Landmarks in Mathematics and Physics},
	edition = {11},
	publisher = {Princeton University Press},
	address = {Princeton, NJ, USA},
}

% A common (standard) textbook on computational geometry covering all basic definitions, data structures, algorithms, proofs of correctness, time and space complexity analyses, and applications. This is the textbook that I used in grad school when learning computational geometry
@book{deberg2008computational,
	author = {de Berg, Mark and Cheong, Otfried and van Kreveld, Marc and Overmars, Mark},
	title = {Computational Geometry: Algorithms and Applications},
	year = {2008},
	edition = {3},
	publisher = {Springer-Verlag, TELOS},
	address = {Santa Clara, CA, USA},
}

% Original reference for Delaunay triangulations -- I have not read this, it's in French, but this is the proper way to cite the original idea for Delaunay triangulations
@article{delaunay1934sur,
	author = {Delaunay, B.},
	title = {Sur la sph\'ere vide},
	year = {1934},
	journal = {Bull. Acad. Science USSR VII: Class. Sci. Math.,},
}

% One of (if not the) early publication on how to perform various simplex walks (such as a visibility walk) within a triangulation in order to locate target simplices, after the triangulation has already been computed and stored in a standard data structure (such as a simplex list)
@inproceedings{devillers2001walking,
	author = {Devillers, Olivier and Pion, Sylvain and Teillaud, Monique},
	title = {Walking in a triangulation},
	year = {2001},
	month = {6},
	booktitle = {Proceedings of the Seventeenth Annual Symposium on Computational Geometry (SCG '01)},
	pages = {106--114},
	organization = {ACM},
	location = {Medford, MA, USA},
	doi = {10.1145/378583.378643},
	url = {https://dl.acm.org/doi/10.1145/378583.378643},
}

% CVXPY is an open source Python optimization and modeling language for solving convex optimization problems in a disciplined way (meaning that we ensure convexity through hard rules on the problem definition). From the lab of Stephen Boyd
@article{diamond2016cvxpy,
	author = {Diamond, Steven and Boyd, Stephen},
	title = {{CVXPY}: {A} {P}ython-embedded modeling language for convex optimization},
	year = {2016},
	journal = {Journal of Machine Learning Research},
	volume = {17},
	number = {83},
	pages = {1--5},
	url = {http://jmlr.org/papers/v17/15-408.html},
}

% ECOS is an open source numerical software for solving second-order cone optimization problems, from the lab of Stephen Boyd. In my experience, this software is the best tool from Boyd's lab and the most robust to degeneracy
@inproceedings{domahidi2013ecos,
	author = {Domahidi, Alexander and Chu, Eric and Boyd, Stephen},
	title = {{ECOS}: {A}n {SOCP} solver for embedded systems},
	year = {2013},
	month = {7},
	booktitle = {European Control Conference (ECC)},
	pages = {3071--3076},
	organization = {IEEE},
	location = {Z{\"u}rich, Switzerland},
	doi = {10.23919/ECC.2013.6669541},
	url = {https://ieeexplore.ieee.org/document/6669541},
}

% In a general triangulation, most simplex walks including a visibility walk are not guaranteed to converge. I.e., due to poor geometry one could get stuck in an infinite cycle walking in circles. This is related to how Dantzig's simplex method can also get caught in infinite cycles. Edelsbrunner proves that in the special case of Delaunay triangulations, this actually can't happen and so the convergence of the visibility walk is guaranteed
@inproceedings{edelsbrunner1989acyclicity,
	author = {Edelsbrunner, Herbert},
	title = {An acyclicity theorem for cell complexes in d dimensions},
	year = {1989},
	booktitle = {Proceedings of the Fifth Annual Symposium on Computational Geometry (SCG '89)},
	pages = {145--151},
	organization = {ACM},
	location = {Saarbruchen, West Germany},
	doi = {10.1145/73833.73850},
	url = {http://portal.acm.org/citation.cfm?doid=73833.73850},
}

% Edelsbrunner's famous simulation of simplicity: introducing minimal
% perturbations to real-world datasets to ensure general position.  This allows
% us to use non robust computational geometry algorithms without worrying about
% handling degeneracy.  The method is a bit too expensive for high-dimensional
% problems, but standard for lower-dimensional problems.
@article{edelsbrunner1990simulation,
  title={Simulation of simplicity: a technique to cope with degenerate cases in geometric algorithms},
  author={Edelsbrunner, Herbert and M{\"u}cke, Ernst Peter},
  journal={ACM Transactions on Graphics (tog)},
  volume={9},
  number={1},
  pages={66--104},
  year={1990},
  publisher={ACM New York, NY, USA}
}

% The famous sweepline algorithm for computing Delaunay triangulations and
% Voronoi tesselations in 2D.  Works by computing a "beachline" of parabolas
% whose focii are the points on the current boundary of the Delaunay
% triangulation.  Any simplices in the triangulation beyond the beachline are
% "finalized" and those vertices need not be considered when adding new points
% into the triangulation.  Results in a O(n log n) sweepline algorithm
@article{fortune1987sweepline,
	author = {Fortune, Steven},
	title = {A sweepline algorithm for {V}oronoi diagrams},
	year = {1987},
	month = {11},
	journal = {Algorithmica},
	volume = {2},
	number = {1},
	pages = {153--174},
	publisher = {Springer Science and Business Media LLC},
	doi = {10.1007/bf01840357},
	url = {http://link.springer.com/10.1007/BF01840357},
	issn = {0178-4617},
}

% A famous blog post by K. Fukuda on how to efficiently calculate Delaunay simplices (or equivalently, Voronoi cell neighbors) efficiently in high dimensions via geometric programming. This method was never published anywhere but appears to be an often forgotten technique. This only works for points in general position (i.e., non degenerate data sets) in perfect precision, but it is somewhat similar to DelaunaySparse in that both could be considered simplex methods for solving either the primal or dual form of Fukuda's problem -- I have personally implemented the dual form in addition to DelaunaySparse and it is publicly available on GitHub: https://github.com/thchang/DualSimplex However, I could not make this form robust to degeneracy
@inproceedings{fukuda2004possible,
	author = {Fukuda, Komei},
	title = {Is it possible to compute only the adjacencies of {V}oronoi cells in the {V}oronoi diagram efficiently?},
	year = {2004},
	month = {August},
	booktitle = {Polyhedral computation {FAQ} (blog)},
	url = {http://www.cs.mcgill.ca/~fukuda/soft/polyfaq/polyfaq.html},
	note = {Retrieved [November 16, 2022]},
}

% Introducing a Delaunay density diagnostic -- using the Delaunay interpolant
% to calculate whether they have enough data to resolve the geometry of a
% problem for interpolation in the context of SciML.  Essentially, they use
% DelaunaySparse to make predictions and slowly add data.  Once they have
% enough data, the predictions begin converging at a linear rate.  Then they
% have enough data to use whatever method they want to solve the problem
@techreport{gillette2022datadriven,
	author = {Gillette, Andrew and Kur, Eugene},
	title = {Data-driven geometric scale detection via Delaunay interpolation},
	year = {2022},
	institution = {arXiv math.NA},
}

% Open source numerical software for the Delaunay density diagnostic -- using
% the Delaunay interpolant to calculate whether they have enough data to
% resolve the geometry of a problem for interpolation in the context of SciML.
% Essentially, they use DelaunaySparse to make predictions and slowly add data.
% Once they have enough data, the predictions begin converging at a linear
% rate.  Then they have enough data to use whatever method they want to solve
% the problem
@article{gillette2024algorithm,
author = {Gillette, Andrew and Kur, Eugene},
title = {Algorithm 1049: The Delaunay Density Diagnostic},
year = {2024},
publisher = {Association for Computing Machinery},
volume = {50},
number = {4},
issn = {0098-3500},
url = {https://doi.org/10.1145/3700134},
doi = {10.1145/3700134},
journal = {ACM Trans. Math. Softw.},
articleno = {24},
numpages = {21},
}

% Theorems on the curse of dimensionality when it comes to drawing data points in high-dimensional spaces. The main theorem implies that the convex hull of N points in D dimensions has volume ~0 for D sufficiently large -- this occurs because of a concentration of measure type result
@article{gorban2017stochastic,
	author = {Gorban, Alexander N and Tyukin, Ivan Yu},
	title = {Stochastic separation theorems},
	year = {2017},
	month = {10},
	journal = {Neural Networks},
	volume = {94},
	pages = {255--259},
	publisher = {Elsevier},
	doi = {10.1016/j.neunet.2017.07.014},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0893608017301776},
	issn = {0893-6080},
}

% Hanson's Fortran numerical software for solving equality constrained nonnegative least-squares (NNLS) problems via an iterative weighted least squares (WNNLS) solver. This is the default constrained least-squares optimization problem solver in the Fortran library SLATEC from Sandia
@article{hanson1982algorithm,
	author = {Hanson, Richard J. and Haskell, Karen H.},
	title = {Algorithm 587: Two Algorithms for the Linearly Constrained Least Squares Problem},
	year = {1982},
	month = {9},
	journal = {ACM Trans. Math. Softw.},
	volume = {8},
	number = {3},
	pages = {323--333},
	publisher = {ACM},
	address = {New York, NY, USA},
	doi = {10.1145/356004.356010},
	url = {https://dl.acm.org/doi/10.1145/356004.356010},
	issn = {0098-3500},
}

% The official publication of the open source numerical software numpy: the standard for basic multivariable computations, vector operations, and simple linear algebra in Python
@article{harris2020array,
	author = {Harris, Charles R. and Millman, K. Jarrod and Walt, St{\'{e}}fan J. van der and Gommers, Ralf and Virtanen, Pauli and Cournapeau, David and Wieser, Eric and Taylor, Julian and Berg, Sebastian and Smith, Nathaniel J. and Kern, Robert and Picus, Matti and Hoyer, Stephan and Kerkwijk, Marten H. van and Brett, Matthew and Haldane, Allan and R{\'{i}}o, Jaime Fern{\'{a}}ndez del and Wiebe, Mark and Peterson, Pearu and G{\'{e}}rard-Marchant, Pierre and Sheppard, Kevin and Reddy, Tyler and Weckesser, Warren and Abbasi, Hameer and Gohlke, Christoph and Oliphant, Travis E.},
	title = {Array programming with {NumPy}},
	year = {2020},
	month = {9},
	journal = {Nature},
	volume = {585},
	number = {7825},
	pages = {357--362},
	publisher = {Springer Science and Business Media {LLC}},
	doi = {10.1038/s41586-020-2649-2},
	url = {https://www.nature.com/articles/s41586-020-2649-2},
	issn = {0028-0836},
}

% The official CGAL User Guide docs page for computing high-dimensional convex
% hulls and Delaunay triangulations. CGAL is a standard numerical software
% package for using computational geometry data structures and algorithms in
% perfect precision (via symbolic arithmetic). CGAL is a header-only open
% source C++ library
@incollection{hert2020convex,
	author = {Hert, Susan and Seel, Michael},
	title = {{dD} Convex Hulls and {D}elaunay Triangulations},
	year = {2020},
	booktitle = {{CGAL} User and Reference Manual},
	edition = {{5.0.2}},
	publisher = {{CGAL Editorial Board}},
	url = {https://doc.cgal.org/5.0.2/Manual/packages.html#PkgConvexHullD},
}

% The official publication for HiGHS numerical optimization open source software package and solver for linear programming problems. The first successful effort to parallelize a simplex method based solver, specifically, they have successfully parallelized the dual revised simplex approach. HiGHS is now the default solver in most scipy.optimize. HiGHS is written in C++ with Fortran, C, and Python interfaces -- support CPU and GPU parallelism, the authors don't get perfect scaling by any means but this is the first successful effort to parallelize linear programming and still an achievement
@article{huangfu2018parallelizing,
	author = {Huangfu, Qi and Hall, JA Julian},
	title = {Parallelizing the dual revised simplex method},
	year = {2018},
	month = {3},
	journal = {Mathematical Programming Computation},
	volume = {10},
	number = {1},
	pages = {119--142},
	publisher = {Springer},
	doi = {10.1007/s12532-017-0130-5},
	url = {http://link.springer.com/10.1007/s12532-017-0130-5},
	issn = {1867-2949},
}

% Original publication on maximin and minimax designs for design-of-experiments. I.e., minimize the maximum distance from any point in the bounding box to the nearest point in the design, and maximize the minimum distance between any pair of points in the design.
@article{johnson1990minimax,
	author = {Johnson, M.E. and Moore, L.M. and Ylvisaker, D.},
	title = {Minimax and maximin distance designs},
	year = {1990},
	month = {10},
	journal = {Journal of Statistical Planning and Inference},
	volume = {26},
	number = {2},
	pages = {131--148},
	publisher = {Elsevier BV},
	doi = {10.1016/0378-3758(90)90122-B},
	url = {https://linkinghub.elsevier.com/retrieve/pii/037837589090122B},
	issn = {0378-3758},
}

% The Klee Minty cube: A famous counterexample showing that for every pivoting strategy for the simplex method, we can construct a pathological problem where that strategy will visit every vertex of the cube before the solution. This proves that the simplex method cannot be used to solve linear programming problems in strongly polynomial time
@article{klee1972how,
	author = {Klee, Victor and Minty, George J.},
	title = {How good is the simplex algorithm?},
	year = {1972},
	journal = {Inequalities},
	volume = {III},
	pages = {159--175},
}

% A counter example showing that the worst-case size of the Delaunay
% triangulation and Voronoi diagram is always exponential in the dimension.
% The example is somewhat similar to the Klee-Minty cube from linear
% programming.
@article{klee1980complexity,
	author = {Klee, Victor},
	title = {On the complexity of d-dimensional {V}oronoi diagrams},
	year = {1980},
	month = {12},
	journal = {Archiv der Mathematik},
	volume = {34},
	number = {1},
	pages = {75--80},
	publisher = {Springer Science and Business Media LLC},
	doi = {10.1007/bf01224932},
	url = {http://link.springer.com/10.1007/BF01224932},
	issn = {0003-889X},
}

% A paper on the Delaunay triangulation learner -- an alternative to ReLU
% multilayer perceptrons where they fit a Delaunay triangulation to a small set
% of nodes and then train the response values of those nodes to make the
% Delaunay interpolant match the data
@inproceedings{liu2019nonparametric,
	author = {Liu, Yehong and Yin, Guosheng},
	title = {Nonparametric functional approximation with {D}elaunay triangulation learner},
	year = {2019},
	month = {11},
	booktitle = {Proceedings of the 2019 IEEE International Conference on Big Knowledge (ICBK)},
	pages = {167--174},
	organization = {IEEE},
	location = {Beijing, China},
	doi = {10.1109/icbk.2019.00030},
	url = {https://ieeexplore.ieee.org/document/8944414},
}

% Using various interpolation, neural networks, and other scientific machine
% learning methods to predict and model HPC performance based on system
% configuration parameters -- explores Delaunay interpolation, support vector
% regressors, Shepard's method, and multilayer perceptrons
@inproceedings{lux2018predictive,
	author = {Lux, Thomas C. H. and Watson, Layne T. and Chang, Tyler H. and Bernard, Jon and Li, Bo and Xu, Li and Back, Godmar and Butt, Ali R. and Cameron, Kirk W. and Hong, Yili},
	title = {Predictive modeling of {I/O} characteristics in high performance computing systems},
	year = {2018},
	booktitle = {Proceedings of the 2018 Spring Simulation Conference (SpringSim 2018), the 26th High Performance Computing Symposium (HPC '18)},
	articleno = {8},
	organization = {SCS},
	location = {Baltimore, MD, USA},
}

% Error bounds for piecewise linear interpolation within a simplex (i.e.,
% Delaunay interpolation error bounds) for scattered data.  Also, critically,
% empirical evidence that you can just interpolate noisy data and it does
% just as well as true regression in high dimensions.  First hand evidence that
% feeds my opinion that "overfitting is a lie"
@article{lux2021interpolation,
	author = {Lux, Thomas C. H. and Watson, Layne T. and Chang, Tyler H. and Bernard, Jon and Li, Bo and Xu, Li and Back, Godmar and Butt, Ali R. and Cameron, Kirk W. and Hong, Yili},
	title = {Interpolation of sparse high-dimensional data},
	year = {2021},
	month = {9},
	journal = {Numerical Algorithms},
	volume = {88},
	number = {1},
	pages = {281--313},
	publisher = {Springer},
	doi = {10.1007/s11075-020-01040-2},
	url = {https://link.springer.com/10.1007/s11075-020-01040-2},
	issn = {1017-1398},
}

% Thomas' thorough survey paper on useful meshes and their properties for
% multivariate interpolation
@inproceedings{lux2018novel,
  author = {Lux, Thomas C. H. and Watson, Layne T. and Chang, Tyler H. and Bernard, Jon and Li, Bo and Yu, Xiadong and Xu, Li and Back, Godmar and Butt, Ali R. and Cameron, Kirk W. and Yao, Danfeng and Hong, Yili},
  title = {Novel meshes for multivariate interpolation and approximation},
  year = {2018},
  booktitle = {Proc. 2018 ACM Southeast Conference (ACMSE '18)},
  articleno = {13},
  numpages = {7},
  location = {Richmond, KY, USA},
  organization = {Association of Computing Machinery},
  doi = {10.1145/3190645.3190687}
}

% Algorithms and theorems on the difficulty of finding basic solutions for linear programming problems
@article{megiddo1991finding,
	author = {Megiddo, Nimrod},
	title = {On finding primal- and dual-optimal bases},
	year = {1991},
	month = {2},
	journal = {ORSA Journal on Computing},
	volume = {3},
	number = {1},
	pages = {63--65},
	publisher = {Institute for Operations Research and the Management Sciences (INFORMS)},
	doi = {10.1287/ijoc.3.1.63},
	url = {https://pubsonline.informs.org/doi/10.1287/ijoc.3.1.63},
	issn = {0899-1499},
}

% How to construct meshes whose size only grows linearly (expected space) with
% the dimension
@inproceedings{miller2008linearsize,
	author = {Miller, G. and Phillips, T. and Sheehy, D.},
	title = {Linear-size meshes},
	year = {2008},
	booktitle = {Proceedings of the 20th Canadian Conference on Computational Geometry (CCCG 2008)},
	pages = {175--178},
	location = {Montr{\'e}al, Qu{\'e}bec},
}

% Original reference for barycentric weight based interpolation -- I have not read this, it's in German, but this is the proper way to cite barycentric interpolation
@book{mobius1827der,
	author = {M\"obius, August Ferdinand},
	title = {Der barycentrische Calcul},
	year = {1827},
	pages = {1--388},
	publisher = {Verlag von Johann Ambrosius Barth},
}

% An early paper on simplex walks for locating which element of a Delaunay
% triangulation contains a point (after the triangulation has already been
% precomputed and stored)
@article{mucke1999fast,
	author = {M{\"u}cke, Ernst P. and Saias, Isaac and Zhu, Binhai},
	title = {Fast randomized point location without preprocessing in two- and three-dimensional {D}elaunay triangulations},
	year = {1999},
	journal = {Computational Geometry},
	volume = {12},
	number = {1},
	pages = {63--83},
}

% An early review paper on methods and algorithms in "geometric learning",
% i.e., a form of topological data analysis that focuses on the usage of
% geometric algorithms and modeling for machine learning and data science
% applications
@article{omohundro1990geometric,
	author = {Omohundro, Stephen M.},
	title = {Geometric learning algorithms},
	year = {1990},
	month = {6},
	journal = {Physica D: Nonlinear Phenomena},
	volume = {42},
	number = {1},
	pages = {307--321},
	publisher = {Elsevier BV},
	doi = {10.1016/0167-2789(90)90085-4},
	url = {https://linkinghub.elsevier.com/retrieve/pii/0167278990900854},
	issn = {0167-2789},
}

% Official docs and reference for the Matlab computational geometry toolbox
% (numerical software), which includes all of Matlab's built-in tools for
% computing geometric algorithms and structures, including Delaunay
% triangulations
@techreport{papazafeiropoulos2014matlab,
	author = {Papazafeiropoulos, George},
	title = {{MATLAB} Computational Geometry Toolbox version 1.2},
	year = {2014},
	month = {November},
	institution = {MathWorks},
	url = {https://www.mathworks.com/matlabcentral/fileexchange/48509-computational-geometry-toolbox},
	note = {Last accessed: April 27, 2020},
}

% A novel traversal algorithm for high-dimensional Vornoi graphs (or
% equivalently, a simplex walk algorithm for high-dimensional Delaunay
% triangulations)
@inproceedings{polianskii2020voronoi,
	author = {Polianskii, Vladislav and Pokorny, Florian T},
	title = {Voronoi Graph Traversal in High Dimensions with Applications to Topological Data Analysis and Piecewise Linear Interpolation},
	year = {2020},
	month = {8},
	booktitle = {Proceedings of the 26th ACM SIGKDD International Conference on Knowledge Discovery \& Data Mining},
	pages = {2154--2164},
	organization = {ACM},
	location = {Virtual Event CA USA},
	doi = {10.1145/3394486.3403266},
	url = {https://dl.acm.org/doi/10.1145/3394486.3403266},
}

% An analysis on whether and how Delaunay triangulations can be optimal in
% higher dimensional spaces, given that many early optimality conditions had to
% do with two dimensions (i.e., self-centeredness of elements and minimizing
% the sum-of-squared edge lengths in the graph only apply in 2D)
@article{rajan1994optimality,
	author = {Rajan, V. T.},
	title = {Optimality of the {D}elaunay triangulation in {$\R^d$}},
	year = {1994},
	month = {7},
	journal = {Discrete \& Computational Geometry},
	volume = {12},
	number = {2},
	pages = {189--202},
	publisher = {Springer Science and Business Media LLC},
	doi = {10.1007/bf02574375},
	url = {https://link.springer.com/10.1007/BF02574375},
	issn = {0179-5376},
}

% Extremely thorough analysis of using linear models inside a simplex (e.g.,
% tetrahedral meshes) for interpolation: covering basic algorithm, conditioning, approximation error, quality metrics, etc.
@inproceedings{shewchuk2002what,
	author = {Shewchuk, Jonathan},
	title = {What is a good linear finite element? {I}nterpolation, conditioning, anisotropy, and quality measures},
	year = {2002},
	booktitle = {Proceedings of the 11th International Meshing Roundtable},
	pages = {115--126},
}

% Steve Smale's list of unsolved open problems in mathematics, and mostly algorithms, one of which is reliably finding basic solutions to linear programming problems
@article{smale1998mathematical,
	author = {Smale, Steve},
	title = {Mathematical problems for the next century},
	year = {1998},
	month = {3},
	journal = {The Mathematical Intelligencer},
	volume = {20},
	number = {2},
	pages = {7--15},
	publisher = {Springer Science and Business Media LLC},
	doi = {10.1007/bf03025291},
	url = {http://link.springer.com/10.1007/BF03025291},
	issn = {0343-6993},
}

% OSQP is an open source numerical software for solving quadratic programming problems from Stephen Boyd's lab
@article{stellato2020osqp,
	author = {Stellato, Bartolomeo and Banjac, Goran and Goulart, Paul and Bemporad, Alberto and Boyd, Stephen},
	title = {{OSQP}: an operator splitting solver for quadratic programs},
	year = {2020},
	month = {12},
	journal = {Mathematical Programming Computation},
	volume = {12},
	number = {4},
	pages = {637--672},
	publisher = {Springer Science and Business Media LLC},
	doi = {10.1007/s12532-020-00179-2},
	url = {http://link.springer.com/10.1007/s12532-020-00179-2},
	issn = {1867-2949},
}

% A nice summary article (with some performance comparisons) for a wide variety
% of sequential Delaunay triangulation algorithms in 2D
@article{su1997comparison,
	author = {Su, Peter and Drysdale, Robert L. S.},
	title = {A comparison of sequential {D}elaunay triangulation algorithms},
	year = {1997},
	month = {4},
	journal = {Computational Geometry},
	volume = {7},
	number = {5},
	pages = {361--385},
	publisher = {Elsevier BV},
	doi = {10.1016/s0925-7721(96)00025-9},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0925772196000259},
	issn = {0925-7721},
}

% A benchmark data science problem from the field of computer security: robustly classifying suspicious network traffic based on metadata about the requests
@inproceedings{tavallaee2009detailed,
	author = {Tavallaee, Mahbod and Bagheri, Ebrahim and Lu, Wei and Ghorbani, Ali A.},
	title = {A detailed analysis of the {KDD} {CUP} 99 data set},
	year = {2009},
	month = {7},
	booktitle = {2009 IEEE Symposium on Computational Intelligence for Security and Defense Applications},
	pages = {1--6},
	organization = {IEEE},
	location = {Ottawa, ON, Canada},
	doi = {10.1109/CISDA.2009.5356528},
	url = {http://ieeexplore.ieee.org/document/5356528},
}

% SciPy official publication: Scipy is an open source numerical software package which is the standard for advanced numerical methods and scientific software packages in Python. Most of scipy are wrappers for much older Fortran or C++ code, that has been highly optimized.
@article{virtanen2020scipy,
	author = {Virtanen, Pauli and Gommers, Ralf and Oliphant, Travis E. and Haberland, Matt and Reddy, Tyler and Cournapeau, David and Burovski, Evgeni and Peterson, Pearu and Weckesser, Warren and Bright, Jonathan and van der Walt, St{\'e}fan J. and Brett, Matthew and Wilson, Joshua and Jarrod Millman, K. and Mayorov, Nikolay and Nelson, Andrew R.~J. and Jones, Eric and Kern, Robert and Larson, Eric and Carey, CJ and Polat, {\.I}lhan and Feng, Yu and Moore, Eric W. and VanderPlas, Jake and Laxalde, Denis and Perktold, Josef and Cimrman, Robert and Henriksen, Ian and Quintero, E.~A. and Harris, Charles R and Archibald, Anne M. and Ribeiro, Ant{\^o}nio H. and Pedregosa, Fabian and van Mulbregt, Paul and Contributors, SciPy 1.0},
	title = {{SciPy} 1.0: {F}undamental Algorithms for Scientific Computing in {P}ython},
	year = {2020},
	month = {3},
	journal = {Nature Methods},
	volume = {17},
	number = {3},
	pages = {261--272},
	publisher = {Springer Science and Business Media LLC},
	doi = {10.1038/s41592-019-0686-2},
	url = {https://www.nature.com/articles/s41592-019-0686-2},
	issn = {1548-7091},
}

% The Bowyer-Watson algorithm is one of the first algorithms for computing Delaunay triangulations in arbitrary dimensions. It is not particularly scalable, but a first step toward thinking about Delaunay triangulation in more than 3D. Was published by both Bowyer and Watson in the same issue of the same journal, with a footnote from the publisher that they both submitted at the same time and after investigation, it was determined that this was purely coincidental and no plagiarism was involved. Therefore, both papers were published together and both authors are credited equally for discovery
@article{watson1981computing,
	author = {Watson, David F.},
	title = {Computing the n-dimensional {D}elaunay tessellation with application to {V}oronoi polytopes},
	year = {1981},
	month = {2},
	journal = {The Computer Journal},
	volume = {24},
	number = {2},
	pages = {167--172},
	publisher = {Oxford University Press (OUP)},
	doi = {10.1093/comjnl/24.2.167},
	url = {https://academic.oup.com/comjnl/article-lookup/doi/10.1093/comjnl/24.2.167},
	issn = {0010-4620},
}

% An update to DelaunaySparse where we use BQPD to solve the problem of
% projection onto the convex hull.  We rigorously show that this is the only
% method that achieves a 100% success rate among open source quadratic
% programming / NNLS solvers for this size and shape of problem.  Then we
% demonstrate robustness on synthetic test problems and real applications from
% computer security
@article{chang2024remark,
  author = {Chang, Tyler H. and Watson, Layne T. and Leyffer, Sven and Lux, Thomas C. H. and Almohri, Hussain M. J.},
  title = {Remark on {Algorithm} 1012: Computing projections with large data sets},
  year = {2024},
  journal = {ACM Transactions on Mathematical Software},
  volume = {50},
  number = {2},
  articleno = {12},
  numpages = {8},
  publisher = {Association of Computing Machinery},
  doi = {10.1145/3656581},
}

% The Dakota blackbox and derivative-free simulation optimization framework, a numerical software package (in C++) maintained by Sandia that offers support for AI/ML surrogate modeling, multifidelity modeling, uncertainty quantification (UQ), and distributed and parallel computing
@techreport{adams2022dakota,
	author = {Adams, Brian M. and Bohnhoff, William J. and Dalbey, Keith R. and Ebeida, Mohamed S. and Eddy, John P. and Eldred, Michael S. and Hooper, Russell W. and Hough, Patricia D. and Hu, Kenneth T. and Jakeman, John D. and Khalil, Mohammad and Maupin, Kathryn A. and Monschke, Jason A. and Ridgeway, Elliott M. and Rushdi, Ahmad A. and Seidl, D. Thomas and Stephens, J. Adam and Swiler, Laura P. and Tran, Anh and Winokur, Justin G.},
	title = {Dakota, A Multilevel Parallel Object-Oriented Framework for Design Optimization, Parameter Estimation, Uncertainty Quantification, and Sensitivity Analysis: Version 6.16 User's Manual},
	year = {2022},
	number = {SAND2022-6171 version 6.16},
	institution = {Sandia National Laboratory},
	address = {Albuquerque, NM, USA},
	url = {https://dakota.sandia.gov/sites/default/files/docs/6.16.0/Users-6.16.0.pdf},
	keywords = {software, parallel programming, C++},
}

% Differentiabl convex optimization layers are introduced pytorch and tensorflow via an update to cvxpy, introducing differentiation through the solution to a convex optimization problem modeled in cvxpy. The open source numerical optimization software is available at github.com/cvxgrp/cvxpylayers in Python
@inproceedings{agrawal2019differentiable,
	author = {Agrawal, Akshay and Amos, Brandon and Barratt, Shane and Boyd, Stephen and Diamond, Steven and Kolter, J. Zico},
	editor = {Wallach, H. and Larochelle, H. and Beygelzimer, A. and Alch\'{e}-Buc, F. d\textquotesingle and Fox, E. and Garnett, R.},
	title = {Differentiable Convex Optimization Layers},
	year = {2019},
	booktitle = {Advances in Neural Information Processing Systems},
	volume = {32},
	organization = {Curran Associates, Inc.},
	url = {https://proceedings.neurips.cc/paper_files/paper/2019/file/9ce3c52fc54362e22053399d3181c638-Paper.pdf},
	keywords = {software, open source, OSS, Python},
}

% Optuna open source software for fully distributed hyperparameter optimization. Maintained by a private startup in Japan (named Optuna). This software provides high-quality distributed wrappers for many neural architecture search and generic optimization algorithms.
@inproceedings{akiba2019optuna,
	author = {Akiba, Takuya and Sano, Shotaro and Yanase, Toshihiko and Ohta, Takeru and Koyama, Masanori},
	title = {Optuna: A next-generation hyperparameter optimization framework},
	year = {2019},
	month = {7},
	booktitle = {Proceedings of the 25th ACM SIGKDD international conference on knowledge discovery \& data mining},
	pages = {2623--2631},
	organization = {ACM},
	location = {Anchorage AK USA},
	doi = {10.1145/3292500.3330701},
	url = {https://dl.acm.org/doi/10.1145/3292500.3330701},
	keywords = {software, open source, OSS, Python, parallel programming},
}

% The official AMD Vivado docs -- Vivado is Xilinx (acquired by AMD)'s analytic placer, which is currently considered the state-of-the-art and only real option for placement and routing in industrial FPGA pnr applications
@misc{amdvivadodevelopers2024vivado,
	author = {AMD~Vivado~Developers, },
	title = {Vivado Design Suite User Guide},
	year = {2024},
	number = {Version 2024.1},
	publisher = {AMD},
	url = {https://docs.amd.com/r/2024.1-English/ug893-vivado-ide},
	note = {Last accessed: Feb 2025},
	keywords = {software, Tcl},
}

% A Fortran 90 implementation of quasi-Newton stochastic optimization algorithms. This open source numerical software solves both determinisitc and stochastic blackbox optimization problems via a quasi-Newton trust-region method. It is a bit wasteful in terms of the number of function evaluations per iteration as it performs a fully Latin hypercube sampling of the trust region in each iteration, and does not explicitly re-use previous iterates to reduce iteration costs, like some of the more advanced model based methods. Still, it is extremely robust and a good choice in stochastic situations. Also includes a good Fortran implementation of Latin hypercube sampling and efficient sorting algorithms
@article{amos2020algorithm,
	author = {Amos, Brandon D. and Easterling, David R. and Watson, Layne T. and Thacker, William I. and Castle, Brent S. and Trosset, Michael W.},
	title = {Algorithm 1007: {QNSTOP}: {Q}uasi-{N}ewton algorithm for stochastic optimization},
	year = {2020},
	month = {6},
	journal = {ACM Transactions on Mathematical Software},
	volume = {46},
	number = {2},
	numpages = {17},
	publisher = {Association for Computing Machinery (ACM)},
	doi = {10.1145/3374219},
	url = {https://dl.acm.org/doi/10.1145/3374219},
	issn = {0098-3500},
	keywords = {software, open source, OSS, Fortran},
}

% The MOSEK solver is a numerical optimization software solver that is used in older versions of scipy.optimize to solve linear programming problems via the interior point method
@inproceedings{andersen2000mosek,
	author = {Andersen, Erling D and Andersen, Knud D},
	title = {The {MOSEK} interior point optimizer for linear programming: an implementation of the homogeneous algorithm},
	year = {2000},
	booktitle = {High performance optimization},
	pages = {197--232},
	organization = {Springer},
	url = {https://link.springer.com/chapter/10.1007/978-1-4757-3216-0_8},
	keywords = {software, Python, Matlab, Go, Julia},
}

% The user guide for the reference implementation of LAPACK: the original open source numerical software for all common dense linear algebra operations.
@book{anderson1999lapack,
	author = {Anderson, E. and Bai, Z. and Bischof, C. and Blackford, S. and Demmel, J. and Dongarra, J. and Du Croz, J. and Greenbaum, A. and Hammarling, S. and McKenney, A. and Sorensen, D.},
	title = {{LAPACK} Users' Guide},
	year = {1999},
	edition = {3},
	publisher = {SIAM},
	address = {Philidelphia, PA, USA},
    url = {https://netlib.org/lapack/lug/},
	keywords = {software, open source, OSS, Fortran},
}

% The SOLAR monte carlo simulation software suite contains a collection of ten derivative-free / blackbox / simulation optimization problem instances for bench-marking blackbox optimization solvers. The problems can be configured with one or two objectives, constrained or unconstrained (including hidden constraints), discrete or continuous, single or multi-fidelity, and with varying levels of stochasticity. The numerical simulation code models a solar power plant's yield as a function of various design factors. The open source C++ software with Python bindings is available at: github.com/bbopt/solar
@article{andresthio2025solar,
	author = {Andr\'{e}s-Thi\'{o}, Nicolau and Audet, Charles and Diago, Miguel and Gheribi, A{\"i}men E. and Le~Digabel, Sebastien and Lebeuf, Xavier and Lemyre~Garneau, Mathieu and Tribes, Christophe},
	title = {solar: A solar thermal power plant simulator for blackbox optimization benchmarking},
	year = {2025},
	month = {3},
	journal = {Optimization and Engineering},
	publisher = {Springer Science and Business Media LLC},
	doi = {10.1007/s11081-024-09952-x},
	url = {https://link.springer.com/10.1007/s11081-024-09952-x},
	issn = {1389-4420},
	keywords = {software, open source, OSS, Python, C++},
}

% Introducing the open source PDLP solver (now part of Google OR tools) for solving large scale linear programming problems, where the constraint matrices would never fit in memory using first-order (matrix free) descent methods. The algorithm is based on PDHG, which is an improvement to ADMM specialized for solving LPs. The main contributions of this solver and its predecessor PDHG are adaptive step-sizes and preconditioning to prevent oscillatory motions plus adpaptive an adaptive restart procedures and presolve to prevent stalling out. This solver is not as fast simplex or interior point methods on problems that do fit in memory, but is extremely scalable and robust on larger problems. Obviously, it cannot give a basic solution since first-order methods are always approximate (with order 10^-8 accuracy). Open source code is available through Google OR tools: github.com/google/or-tools
@inproceedings{applegate2021practical,
	author = {Applegate, David and Diaz, Mateo and Hinder, Oliver and Lu, Haihao and Lubin, Miles and O\textquotesingle Donoghue, Brendan and Schudy, Warren},
	editor = {Ranzato, M. and Beygelzimer, A. and Dauphin, Y. and Liang, P.S. and Vaughan, J. Wortman},
	title = {Practical Large-Scale Linear Programming using Primal-Dual Hybrid Gradient},
	year = {2021},
	booktitle = {Advances in Neural Information Processing Systems},
	volume = {34},
	pages = {20243--20257},
	organization = {Curran Associates, Inc.},
	url = {https://proceedings.neurips.cc/paper_files/paper/2021/file/a8fbbd3b11424ce032ba813493d95ad7-Paper.pdf},
	keywords = {software, open source, OSS, C, Python, Julia},
}

% Introducing the MADS algorithm of variable neighborhood search plus a generalized pattern search adapted to a mesh. Also includes the STYRENE benchmark problem and application for derivative-free blackbox and simulation optimization algorithms. The objective is to maximize the net present value subject to several process and economic constraints. The open source C++ numerical simulation code that defines the problem is available at github.com/bbopt/styrene
@article{audet2008nonsmooth,
	author = {Audet, Charles and B\'echard, Vincent and Le~Digabel, Sebastien},
	title = {Nonsmooth optimization through Mesh Adaptive Direct Search and Variable Neighborhood Search},
	year = {2008},
	month = {6},
	journal = {Journal of Global Optimization},
	volume = {41},
	number = {2},
	pages = {299--318},
	publisher = {Springer Science and Business Media LLC},
	doi = {10.1007/s10898-007-9234-1},
	url = {http://link.springer.com/10.1007/s10898-007-9234-1},
	issn = {0925-5001},
	keywords = {software, open source, OSS, C++},
}

% Official StoMADS reference: StoMADS is the stochastic version of the MADS (generalized pattern search) optimization algorithm and software. The open source StoMADS numerical software is available at github.com/bbopt/StoMADS. It is implemented in MATLAB. The main contribution of StoMADS is to calculate how many resamples and shrinking step sizes are needed to guarantee convergence of the MADS algorithm on problems where the blackbox function / simulation evaluation is stochastic
@article{audet2021stochastic,
	author = {Audet, Charles and Dzahini, Kwassi Joseph and Kokkolaras, Michael and Le~Digabel, Sebastien},
	title = {Stochastic mesh adaptive direct search for blackbox optimization using probabilistic estimates},
	year = {2021},
	month = {5},
	journal = {Computational Optimization and Applications},
	volume = {79},
	number = {1},
	pages = {1--34},
	publisher = {Springer Science and Business Media LLC},
	doi = {10.1007/s10589-020-00249-0},
	url = {https://doi.org/10.1007/s10589-020-00249-0},
	issn = {0926-6003},
	keywords = {software, open source, OSS, Matlab},
}

% NOMAD v4 -- open source numerical software package (in C++) for blackbox and derivative-free optimization via the MADS algorithms. After publication, they have added support for multiobjective optimization, mixed variables, nonlinear constraints, etc. Great example of high-impact open source numerical and optimization software. Improvements over NOMAD v3 include improvements to fundamental algorithms, coding practices, release process, and general project structure to support continuous research and development into the future
@article{audet2022algorithm,
	author = {Audet, Charles and Le Digabel, S\'{e}bastien and Rochon Montplaisir, Viviane and Tribes, Christophe},
	title = {{Algorithm 1027}: {NOMAD} Version 4: Nonlinear Optimization with the {MADS} Algorithm},
	year = {2022},
	month = {9},
	journal = {ACM Transactions on Mathematical Software},
	volume = {48},
	number = {3},
	articleno = {35},
	numpages = {22},
	publisher = {ACM},
	doi = {10.1145/3544489},
	url = {https://dl.acm.org/doi/10.1145/3544489},
	issn = {0098-3500},
	keywords = {software, open source, OSS, C++, Python, parallel programming},
}

% BoTorch: Modular bayesian optimization framework and numerical software package. Uses Ax for deploying A/B testing applications. Uses pytorch for autograd, and uses monte carlo sampling and kernel reparameterization tricks in order to efficiently evaluate composite objective and acquisition functions and non gaussian kernels. Great example of high-impact open source numerical software and optimization software
@inproceedings{balandat2020botorch,
	author = {Balandat, Maximilian and Karrer, Brian and Jiang, Daniel and Daulton, Samuel and Letham, Ben and Wilson, Andrew G and Bakshy, Eytan},
	editor = {Larochelle, H. and Ranzato, M. and Hadsell, R. and Balcan, M.F. and Lin, H.},
	title = {{BoTorch}: A Framework for Efficient {M}onte-{C}arlo {B}ayesian Optimization},
	year = {2020},
	booktitle = {Advances in Neural Information Processing Systems},
	volume = {33},
	pages = {21524--21538},
	organization = {Curran Associates, Inc.},
	url = {https://proceedings.neurips.cc/paper/2020/file/f5b1b89d98b7286673128a5fb112cb9a-Paper.pdf},
	keywords = {software, open source, OSS, Python, parallel programming},
}

% Prasanna and Stefan's original DeepHyper publication -- DeepHyper is an open source extreme-scale distributed optimization package, designed to scale to Argonne's exascale HPCs. Able to train ensembles of neural networks with diverse architectures at scale, with both single and multiobjective hyperparameter tuning support
@inproceedings{balaprakash2018deephyper,
	author = {Balaprakash, Prasanna and Salim, Michael and Uram, Thomas D. and Vishwanath, Venkat and Wild, Stefan M.},
	title = {{DeepHyper}: Asynchronous hyperparameter search for deep neural networks},
	year = {2018},
	month = {12},
	booktitle = {IEEE 25th international conference on high performance computing (HiPC)},
	pages = {42--51},
	organization = {IEEE},
	location = {Bengaluru, India},
	doi = {10.1109/hipc.2018.00014},
	url = {https://ieeexplore.ieee.org/document/8638041},
	keywords = {software, open source, OSS, Python, parallel programming, MPI},
}

% The PETSc user's guide. I haven't used it but PETSc is a widely-used C++ numerical software library and linear algebra / iterative algorithms framework developed at Argonne and used for implementing many well-known iterative solvers, especially in the area of CFD. This is a great example of high-impact open source numerical software and best practices in open source scientific software. Now ships together with TAO, a similar simulation optimization software package
@techreport{balay2022petsctao,
	author = {Balay, Satish and Abhyankar, Shrirang and Adams, Mark F. and Benson, Steven and Brown, Jed and Brune, Peter and Buschelman, Kris and Constantinescu, Emil and Dalcin, Lisandro and Dener, Alp and Eijkhout, Victor and Gropp, William D. and Hapla, V\'{a}clav and Isaac, Tobin and Jolivet, Pierre and Karpeev, Dmitry and Kaushik, Dinesh and Knepley, Matthew G. and Kong, Fande and Kruger, Scott and May, Dave A. and McInnes, Lois Curfman and Mills, Richard Tran and Mitchell, Lawrence and Munson, Todd and Roman, Jose E. and Rupp, Karl and Sanan, Patrick and Sarich, Jason and Smith, Barry F. and Zampini, Stefano and Zhang, Hong and Zhang, Hong and Zhang, Junchao},
	title = {{PETSc/TAO} Users Manual},
	year = {2022},
	number = {ANL-21/39 - Revision 3.17},
	institution = {Argonne National Laboratory},
	address = {Lemont, IL, USA},
	url = {https://petsc.org/release/docs/manual/manual.pdf},
	keywords = {software, open source, OSS, C, C++},
}

% Official PROX-QP paper -- the best open source QP solver according to several benchmarks. Open source C++ code is availabe through the proxsuite github: https://github.com/Simple-Robotics/proxsuite and a Python interface is available through CvxPy
@inproceedings{bambade2022proxqp,
	author = {Bambade, Antoine and El-Kazdadi, Sarah and Taylor, Adrien and Carpentier, Justin},
	title = {{PROX-QP}: Yet another Quadratic Programming Solver for Robotics and beyond},
	year = {2022},
	month = {June},
	booktitle = {RSS 2022 - Robotics: Science and Systems},
	organization = {Robotics: Science and Systems Foundation},
	location = {New York, United States},
	doi = {10.15607/rss.2022.xviii.040},
	url = {https://hal.inria.fr/hal-03683733},
	keywords = {software, open source, OSS, Python, C++},
}

% JAHS-Bench-201: The latest test suite of benchmark problems for neural architecture search. The baseline is random search, but you can solve the problems in their parameterized search space with any optimization algorithm, record the number of true function / simulation evaluations (i.e., networks trained) and submit this to the JAHS-Bench leaderboards on GitHub. This is a good representative test problem for NAS. Both single and multiobjective benchmarks are provided, also most problems can be run in both single or multifidelity evaluation modes
@inproceedings{bansal2022jahsbench201,
	author = {Bansal, Archit and Stoll, Danny and Janowski, Maciej and Zela, Arber and Hutter, Frank},
	editor = {Koyejo, S. and Mohamed, S. and Agarwal, A. and Belgrave, D. and Cho, K. and Oh, A.},
	title = {{JAHS-Bench-201}: A Foundation For Research On Joint Architecture And Hyperparameter Search},
	year = {2022},
	booktitle = {Advances in Neural Information Processing Systems},
	volume = {35},
	pages = {38788--38802},
	organization = {Curran Associates, Inc.},
	url = {https://proceedings.neurips.cc/paper_files/paper/2022/file/fd78f2f65881c1c7ce47e26b040cf48f-Paper-Datasets_and_Benchmarks.pdf},
	keywords = {software, Python},
}

% An open source numerical software library for solving multiobjective optimization problems in java in real-time via heuristics. The authors combine jMetal with data streaming via Apache Spark to solve distributed multiobjective optimization problems with streaming data in real-time
@article{barbagonzález2018jmetalsp,
	author = {Barba-González, Cristóbal and García-Nieto, José and Nebro, Antonio J. and Cordero, José A. and Durillo, Juan J. and Navas-Delgado, Ismael and Aldana-Montes, José F.},
	title = {{jMetalSP}: A framework for dynamic multi-objective big data optimization},
	year = {2018},
	month = {8},
	journal = {Applied Soft Computing},
	volume = {69},
	pages = {737--748},
	publisher = {Elsevier BV},
	doi = {10.1016/j.asoc.2017.05.004},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S1568494617302557},
	issn = {1568-4946},
	keywords = {software, open source, OSS, Java, parallel programming},
}

% The Quickhull algorithm and corresponding numerical software package is one of the best algorithms for computing convex hulls in high dimensions. Since Delaunay triangulations can be obtained by lifting to d+1 dimensional parabola and computing its lower convex hull, Quickhull can also be used to obtain Delaunay triangulations and convex hulls. This is the standard and baseline for high-dimensional Delaunay triangulation, although it seldom scales past 6-7 dimensions before a memory failure occurs, unless the data set is extremely small (exponential time and space complexity in dimension). However, for problems that Quickhull can solve, it's often the fastest and most robust solution. This is also the official reference for the authors' corresponding open source C++ software, which is the default method for Delaunay triangulation and piecewise linear interpolation in scipy.spatial and scipy.interpolate, respectively
@article{barber1996quickhull,
	author = {Barber, C. Bradford and Dobkin, David P. and Huhdanpaa, Hannu},
	title = {The {Q}uickhull algorithm for convex hulls},
	year = {1996},
	month = {12},
	journal = {ACM Transactions on Mathematical Software},
	volume = {22},
	number = {4},
	pages = {469--483},
	publisher = {Association for Computing Machinery (ACM)},
	doi = {10.1145/235815.235821},
	url = {https://dl.acm.org/doi/10.1145/235815.235821},
	issn = {0098-3500},
	keywords = {software, open source, OSS, C, C++},
}

% The FAIR principles for open source scientific software, data, source code, and experiments should by findable (via DOIs or other), accessible (clear purpose and metadata), interoperable (should use standard interfaces, data formats, and schemas), and reusable (well documented, understandable, and not overly specialized to an unnecessarilly niche use-case). These are good principles for any open source software development practices
@article{barker2022introducing,
	author = {Barker, Michelle and Chue Hong, Neil P. and Katz, Daniel S. and Lamprecht, Anna-Lena and Martinez-Ortiz, Carlos and Psomopoulos, Fotis and Harrow, Jennifer and Castro, Leyla Jael and Gruenpeter, Morane and Martinez, Paula Andrea and Honeyman, Tom},
	title = {Introducing the {FAIR} Principles for research software},
	year = {2022},
	month = {10},
	journal = {Scientific Data},
	volume = {9},
	number = {1},
	numpages = {622},
	publisher = {Nature Publishing Group},
	doi = {10.1038/s41597-022-01710-x},
	url = {https://www.nature.com/articles/s41597-022-01710-x},
	issn = {2052-4463},
	keywords = {software, open source, OSS},
}

% jMetalPy -- a Python framework for solving MOOs with EAs -- this open source numerical software is a Python implementation of jMetal, with some improvements to code quality and new features for better open source software development and parallelism
@article{benitezhidalgo2019jmetalpy,
	author = {Ben{\'i}tez-Hidalgo, Antonio and Nebro, Antonio J. and Garc{\'i}a-Nieto, Jos{\'e} and Oregi, Izaskun and Ser, },
	title = {{jMetalPy}: A {P}ython framework for multi-objective optimization with metaheuristics},
	year = {2019},
	month = {12},
	journal = {Swarm and Evolutionary Computation},
	volume = {51},
	numpages = {100598},
	publisher = {Elsevier BV},
	doi = {10.1016/j.swevo.2019.100598},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S2210650219301397},
	issn = {2210-6502},
	keywords = {software, open source, OSS, Python, Java, parallel programming},
}

% Original VPR paper discussing their simulated-annealing placement and its cost function. As far as I can tell, this placement approach has been improved but not fundamentally changed in the years since original publication. VPR is now shipped as part of the open source software package VTR: at github.com/verilog-to-routing/vtr-verilog-to-routing
@inproceedings{betz1997vpr,
	author = {Betz, Vaughn and Rose, Jonathan},
	editor = {Luk, Wayne and Cheung, Peter Y. K. and Glesner, Manfred},
	title = {{VPR}: a new packing, placement and routing tool for {FPGA} research},
	year = {1997},
	booktitle = {Field-Programmable Logic and Applications},
	pages = {213--222},
	organization = {Springer Berlin Heidelberg},
	location = {Berlin, Heidelberg},
	isbn = {978-3-540-69557-8},
	keywords = {software, open source, OSS, C++, Verilog},
}

% NASA's FUN3D CFD solver. This is one of the oldest and standard numerical softwares for solving CFD problems. Written in mostly Fortran 90. Uses a form of the problem that yields the adjoints, which can be used to optimize structures in fewer steps and perform sensitivity analyses. The kernel uses an iterative solver to solve a massive block-sparse linear system (I think derived from the weak form). Some a priori multiobjective optimization solvers are described in Section 9.9
@techreport{biedron2019fun3d,
	author = {Biedron, Robert T. and Carlson, Jan Renee and Derlaga, Joseph M. and Gnoffo, Peter A. and Hammond, Dana P. and Jones, William T. and Kleb, Bill and Lee-Rausch, Elizabeth M. and Nielson, Eric J. and Park, Michael A. and Rumsey, Christopher L. and Thomas, James L. and Thompson, Kyle B. and Wood, William A.},
	title = {{FUN3D Manual}: 13.6},
	year = {2019},
	number = {{NASA} {T}echnical {M}emorandum ({TM}) 2019-220416},
	institution = {NASA Langley Research Center},
	address = {Hampton, VA, USA},
	url = {https://fun3d.larc.nasa.gov/papers/FUN3D_Manual-13.6.pdf},
	keywords = {software, Fortran, parallel programming, CUDA, MPI},
}

% pagmo/pygmo - Parallel frameworks for solving multiobjective optimization problems (MOO) in Java and Python. Great example of open source numerical software, published in JOSS
@article{biscani2020parallel,
	author = {Biscani, Francesco and Izzo, Dario},
	title = {A parallel global multiobjective framework for optimization: pagmo},
	year = {2020},
	month = {9},
	journal = {Journal of Open Source Software},
	volume = {5},
	number = {53},
	numpages = {2338},
	publisher = {The Open Journal},
	doi = {10.21105/joss.02338},
	url = {https://joss.theoj.org/papers/10.21105/joss.02338},
	issn = {2475-9066},
	keywords = {software, open source, OSS, Python, parallel programming},
}

% The ScaLAPACK user's guide: A highly parallel and scalable open source implementation of the LAPACK software, for solving massive scale numerical linear algebra systems on distributed systems
@book{blackford1997scalapack,
	author = {Blackford, L. Susan and Choi, Jaeyoung and Cleary, Andy and D'Azevedo, Eduardo and Demmel, James and Dhillon, Inderjit and Dongarra, Jack and Hammarling, Sven and Henry, Greg and Petitet, Antoine and Stanley, K. and Walker, D. and Whaley, R. C.},
	title = {{ScaLAPACK} Users' Guide},
	year = {1997},
	volume = {4},
	publisher = {SIAM},
    url = {https://www.netlib.org/scalapack/},
	keywords = {software, open source, OSS, Fortran, parallel programming, MPI},
}

% pymoo is an open source software package implementing NSGA-II, NSGA-III, and many other multiobjective evolutionary algorithms (MOEAs), plus extensions for handling things such as categorical variables. This is a well-maintained and well-documented open-source numerical software package. It is maintained by the lab of the original NSGA-II author, and therefore could be considered the official NSGA-II implementation. all source code in Python
@article{blank2020pymoo,
	author = {Blank, Julian and Deb, Kalyanmoy},
	title = {{pymoo}: Multi-Objective Optimization in {Python}},
	year = {2020},
	journal = {IEEE Access},
	volume = {8},
	pages = {89497--89509},
	publisher = {Institute of Electrical and Electronics Engineers (IEEE)},
	doi = {10.1109/ACCESS.2020.2990567},
	url = {https://ieeexplore.ieee.org/document/9078759},
	issn = {2169-3536},
	git = {http://github.com/anyoptimization/pymoo},
	keywords = {software, open source, OSS, Python},
}

% The open source numerical software package (in Python) pySMT. This is a surrogate modeling and Bayesian optimization toolbox for solving multidisciplinary engineering design optimization (MDO) problems, while utilizing derivatives and providing numerical stability analysis for each surrogate model class.
@article{bouhlel2019python,
	author = {Bouhlel, Mohamed Amine and Hwang, John T. and Bartoli, Nathalie and Lafage, Rémi and Morlier, Joseph and Martins, Joaquim R.R.A.},
	title = {A {P}ython surrogate modeling framework with derivatives},
	year = {2019},
	month = {9},
	journal = {Advances in Engineering Software},
	volume = {135},
	pages = {102--662},
	publisher = {Elsevier BV},
	doi = {10.1016/j.advengsoft.2019.03.005},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0965997818309360},
	issn = {0965-9978},
	keywords = {software, open source, OSS, Python},
}

% The recommended citation for the jax software project -- one of my personal favorite open source numerical software in Python. Performs autograd (or algorithmic differentiation) in either forward or reverse mode, is strongly typed, can act as a drop-in replacement for numpy, and can be just-in-time (jit) compiled for massive speedups
@misc{bradbury2018jax,
	author = {Bradbury, J. and others, },
	title = {{JAX}: composable transformations of {P}ython+{N}um{P}y programs},
	year = {2018},
	number = {0.3.13},
	url = {http://github.com/google/jax},
	note = {Last accessed: Jul 2024},
	keywords = {software, open source, OSS, Python, CUDA},
}

% The original TOMS open source numerical software code implementing Sobol sequence (low discrepancy sequence) generation in Fortran 90. Apparently there is a bug or limitation to this code, fixed by Joe et al. 2003 in their TOMS Remark on 659, and subsequent publication of a new generator used in Scipy
@article{bratley1988algorithm,
	author = {Bratley, Paul and Fox, Bennett L.},
	title = {Algorithm 659: Implementing Sobol's Quasirandom Sequence Generator},
	year = {1988},
	month = {3},
	journal = {ACM Transactions on Mathematical Software},
	volume = {14},
	number = {1},
	numpages = {13},
	publisher = {Association for Computing Machinery},
	doi = {10.1145/42288.214372},
	url = {https://doi.org/10.1145/42288.214372},
	issn = {0098-3500},
	keywords = {software, open source, OSS, Fortran},
}

% The largest repository of open source AI, machine learning, and control benchmark problems, maintained by OpenAI. This was the primary benchmark problem environment for all reinforcement learning researchers not affiliated with another company with their own private environments (such as Meta and Google). Still available at github.com/openai/gym
@techreport{brockman2016openai,
	author = {Brockman, Greg and Cheung, Vicki and Pettersson, Ludwig and Schneider, Jonas and Schulman, John and Tang, Jie and Zaremba, Wojciech},
	title = {OpenAI Gym},
	year = {2016},
	institution = {arXiv:1606.01540},
    git = {https://github.com/openai/gym},
	keywords = {software, open source, OSS, Python},
}

% Official IOZone reference -- this benchmarking software can be used to measure the read, write, strided-read, strided-write, first read, first write, etc throughputs on a given system. In the VarSys project, we used this to measure IO performance (which we then used to calculate performance variability) for various system configurations on our Moana cluster.
@misc{capps2016iozone,
	author = {Capps, Don and Capps, Carol and Sawyer, Darren and Lohr, Jerry and Dowding, George and Little, Gary and Capps, Terry and Miller, Robin and Faibish, Sorin and Wang, Raymond and Waghmare, Tanmay and Zhang, Yansheng and Miller, Vernon and Principe, Nick and Jones, Zach and Bapat, Udayan and Norcott, William and Crawford, Isom and Collins, Kirby and Slater, Al and Rhine, Scott and Wisner, Mike and Goss, Ken and Landherr, Steve and Smith, Brad and Kelly, Mark and CYR, Alain and Dunlap, Randy and Montague, Mark and Million, Dan and Brebner, Gavin and Zucconi, Jean-Marc and Blomberg, Jeff and Halevy, Benny and Boone, Dave and Habbinga, Erik and Strecker, Kris and Wong, Walter and Root, Joshua and Bacchella, Fabrice and Xue, Zhenghua and Li, Qin and Sawyer, Darren and Bojaxhi, Vangel and England, Ben and Lapa, Vikentsi and Skidanov, Alexey},
	title = {{IOzone} Filesystem Benchmark},
	year = {2016},
	month = {January},
	url = {www.iozone.org},
	note = {Last accessed: Nov 2016},
	keywords = {software, benchmarking},
}

% A really nice suite of quadratic programming (QP) benchmark problems
@misc{caron2024qpbenchmark,
	author = {Caron, Stéphane and Zaki, Akram and Otta, Pavel and Arnström, Daniel and Carpentier, Justin and Yang, Fengyu and Leziart, Pierre-Alexandre},
	title = {qpbenchmark: Benchmark for quadratic programming solvers available in {Python}},
	year = {2024},
	booktitle = {GitHub repository},
	number = {2.4.0},
	publisher = {GitHub},
	git = {https://github.com/qpsolvers/qpbenchmark},
	note = {Last accessed: Apr 29, 2025},
	keywords = {software, open source, OSS, Python, benchmarking},
}

% The DelaunaySparse software, demonstrates how to calculate simplices from a Delauay triangulation in very high dimensions scalably (and in parallel) using a highly customized simplex method like solver. The resulting Fortran numerical software is fully open source with a C and Python interface
@article{chang2020algorithm,
	author = {Chang, Tyler H. and Watson, Layne T. and Lux, Thomas C. H. and Butt, Ali R. and Cameron, Kirk W. and Hong, Yili},
	title = {Algorithm 1012: {DELAUNAYSPARSE}: {I}nterpolation via a sparse subset of the {D}elaunay triangulation in medium to high dimensions},
	year = {2020},
	month = {12},
	journal = {home},
	series = {Collections of the ACM},
	volume = {46},
	number = {4},
	articleno = {38},
	numpages = {20},
	publisher = {Association of Computing Machinery},
	address = {New York, NY, USA},
	doi = {10.1145/3422818},
	url = {https://dl.acm.org/doi/10.1145/3422818},
	issn = {0098-3500},
	git = {https://github.com/vtopt/DelaunaySparse},
	web = {https://vtopt.github.io/DelaunaySparse},
	keywords = {software, open source, OSS, Fortran, Python, C, parallel programming, OpenMP},
}

% My PhD thesis, including multiobjective optimization techniques, algorithm, performance analysis, and software review; description of VTMOP, running parallel simulations, integrating with libE. Also scientific machine learning via Delaunay interpolation and algorithms and proofs for doing so. Several applications related to HPC performance modeling and autotuning.
@phdthesis{chang2020mathematical,
	author = {Chang, Tyler H.},
	title = {Mathematical Software for Multiobjective Optimization Problems},
	year = {2020},
	school = {Virginia Tech, Dept. of Computer Science},
	url = {https://vtechworks.lib.vt.edu/handle/10919/98915},
	keywords = {software, parallel programming, Fortran, Python, OpenMP, MPI},
}

% Publication of my second open source numerical software package: VTMOP a Fortran software for solving blackbox multiobjective optimization problems. Uses surrogate modeling (RSM), with an adaptive weighting scheme, within a trust region framework. The motivating application is a particle accelerator tuning problem at SLAC
@article{chang2022algorithm,
	author = {Chang, Tyler H. and Watson, Layne T. and Larson, Jeffrey and Neveu, Nicole and Thacker, William I. and Deshpande, Shubhangi and Lux, Thomas C. H.},
	title = {{Algorithm 1028}: {VTMOP}: Solver for Blackbox Multiobjective Optimization Problems},
	year = {2022},
	month = {9},
	journal = {{ACM} Transactions on Mathematical Software},
	volume = {48},
	number = {3},
	numpages = {36},
	publisher = {Association for Computing Machinery (ACM)},
	doi = {10.1145/3529258},
	url = {https://dl.acm.org/doi/10.1145/3529258},
	issn = {0098-3500},
	git = {https://github.com/Libensemble/libe-community-examples/tree/main/vtmop},
	keywords = {software, open source, OSS, Fortran, OpenMP, MPI},
}

% The ParMOO JOSS article -- ParMOO is my open source numerical software package and library ParMOO, written in Python, which can be used for implementing custom solvers for multiobjective simulation optimization problems, while supporting mixed variables, non linear constraints, and diverse and custom surrogte models, and composite structures where some components of the problem are blackbox, but the rest are algebraic. In later releases, ParMOO also supports interactive visualization of results via Plotly + Dash, parallel and distributed function evaluations via libEnsemble, and automatic gradient calculations and just-in-time compilation via jax
@article{chang2023parmoo,
	author = {Chang, Tyler H. and Wild, Stefan M.},
	title = {{ParMOO}: A {P}ython library for parallel multiobjective simulation optimization},
	year = {2023},
	month = {2},
	journal = {Journal of Open Source Software},
	volume = {8},
	number = {82},
	numpages = {4468},
	publisher = {The Open Journal},
	doi = {10.21105/joss.04468},
	url = {https://joss.theoj.org/papers/10.21105/joss.04468},
	issn = {2475-9066},
	keywords = {software, open source, OSS, Python, parallel programming},
}

% The ParMOO docs -- ParMOO is my open source numerical software package and library ParMOO, written in Python, which can be used for implementing custom solvers for multiobjective simulation optimization problems, while supporting mixed variables, non linear constraints, and diverse and custom surrogte models, and composite structures where some components of the problem are blackbox, but the rest are algebraic. In later releases, ParMOO also supports interactive visualization of results via Plotly + Dash, parallel and distributed function evaluations via libEnsemble, and automatic gradient calculations and just-in-time compilation via jax
@techreport{chang2024parmoo,
	author = {Chang, Tyler H. and Wild, Stefan M. and Dickinson, Hyrum},
	title = {{ParMOO}: {P}ython library for parallel multiobjective simulation optimization},
	year = {2024},
	number = {Version 0.4.1},
	institution = {Argonne National Laboratory},
	address = {Lemont, IL, USA},
	url = {https://parmoo.readthedocs.io/en/latest},
	keywords = {software, open source, OSS, Python, parallel programming, MPI},
}

% The ParMOO IJOC article describing the design of the ParMOO software, motivation, and providing examples of how ParMOO can be used to solve common scientific problems more efficiently with low effort -- ParMOO is my open source numerical software package and library ParMOO, written in Python, which can be used for implementing custom solvers for multiobjective simulation optimization problems, while supporting mixed variables, non linear constraints, and diverse and custom surrogte models, and composite structures where some components of the problem are blackbox, but the rest are algebraic. In later releases, ParMOO also supports interactive visualization of results via Plotly + Dash, parallel and distributed function evaluations via libEnsemble, and automatic gradient calculations and just-in-time compilation via jax
@article{chang2025designing,
	author = {Chang, Tyler H. and Wild, Stefan M.},
	title = {Designing a Framework for Solving Multiobjective Simulation Optimization Problems},
	year = {2025},
	month = {3},
	journal = {INFORMS Journal on Computing},
	publisher = {Institute for Operations Research and the Management Sciences (INFORMS)},
	doi = {10.1287/ijoc.2023.0250},
	url = {https://pubsonline.informs.org/doi/10.1287/ijoc.2023.0250},
	issn = {1091-9856},
	keywords = {software, open source, OSS, Python, parallel programming},
}

% This is the IJOC ParMOO repository DOI -- this is an archive of the software experiments for obtaining our test problems and reproducing our experimental results on those test problems with customized ParMOO solvers.
@misc{chang2025repository,
	author = {Chang, Tyler H. and Wild, Stefan M.},
	title = {Repository for ``Designing a Framework for Solving Multiobjective Simulation Optimization Problems''},
	year = {2025},
	month = {3},
	booktitle = {INFORMS Journal on Computing},
	publisher = {Institute for Operations Research and the Management Sciences (INFORMS)},
	doi = {10.1287/ijoc.2023.0250.cd},
	url = {https://pubsonline.informs.org/doi/suppl/10.1287/ijoc.2023.0250},
	issn = {1091-9856},
	git = {https://github.com/INFORMSJoC/2023.0250},
	note = {Last accessed: May 1, 2025},
	keywords = {software, open source, OSS, Python, parallel programming},
}

% The funcX from Globus computing publication on the techniques and benefits of using a function-as-a-service (FaaS) framework to perform scientific experimentation at Argonne and other labs. funcX and Globus are scientific software products for performing distributed function evaluations and parallel computing that started at Argonne and UChicago, and used at many other labs and industries. Open source Python implementation is available for download at: github.com/globus/globus-compute
@inproceedings{chard2020funcx,
	author = {Chard, Ryan and Babuji, Yadu and Li, Zhuozhao and Skluzacek, Tyler and Woodard, Anna and Blaiszik, Ben and Foster, Ian and Chard, Kyle},
	title = {{funcX}: A federated function serving fabric for science},
	year = {2020},
	month = {6},
	booktitle = {Proc. 29th International Symposium on High-Performance Parallel and Distributed Computing (HPDC '20)},
	pages = {65--76},
	organization = {ACM},
	location = {Stockholm, Sweden},
	doi = {10.1145/3369583.3392683},
	url = {https://dl.acm.org/doi/10.1145/3369583.3392683},
	keywords = {software, open source, OSS, Python, parallel programming, Kubernetes, Slurm, PBS},
}

% The publication for the XGBoost numerical software. XGBoost can be used to efficiently compute optimized gradient boosted decision trees on massive datasets via a fully-distributed algorithm that can be configured to run on Hadoop, SGE, and MPI. It can also be run on NVIDIA GPUs using CUDA. The software is fully open-source and written in highly optimized C++, though everyone uses it through its Python interface. The download is available at github.com/dmlc/xgboost. Most data science competition winners use XGBoost for tabular data
@inproceedings{chen2016xgboost,
	author = {Chen, Tianqi and Guestrin, Carlos},
	title = {{XGBoost}: A Scalable Tree Boosting System},
	year = {2016},
	month = {8},
	booktitle = {Proceedings of the 22nd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (KDD '16)},
	pages = {785--794},
	organization = {ACM},
	location = {San Francisco, California, USA},
	doi = {10.1145/2939672.2939785},
	url = {https://dl.acm.org/doi/10.1145/2939672.2939785},
	keywords = {software, open source, OSS, Python, C++, CUDA, Kubernetes, Spark},
}

% The Keras docs -- great and highly impactful open source Python software, needs no introduction. A simplified interface for quickly building neural networks and other deep learning models with various backends frameworks such as Tensorflow, jax, and Pytorch.
@misc{chollet2015keras,
	author = {Chollet, Fran\c{c}ois and others, },
	title = {Keras},
	year = {2015},
	howpublished = {GitHub repository},
	publisher = {GitHub},
    url = {https://keras.io},
	note = {Last accessed: Nov 2023},
	keywords = {software, open source, OSS, Python},
}

% pyOED an open source Python numerical software library for performing optimal experimental design, e.g, for sensor placement at Argonne
@techreport{chowdhary2024pyoed,
	author = {Chowdhary, Abhijit and Ahmed, Shady E. and Attia, Ahmed},
	title = {{PyOED}: An Extensible Suite for Data Assimilation and Model-Constrained Optimal Design of Experiments},
	year = {2024},
	month = {6},
	booktitle = {ACM Transactions on Mathematical Software},
	volume = {50},
	number = {2},
	articleno = {11},
	numpages = {22},
	institution = {Association for Computing Machinery},
	address = {New York, NY, USA},
	doi = {10.1145/3653071},
	url = {https://doi.org/10.1145/3653071},
	issn = {0098-3500},
	keywords = {software, open source, OSS, Python},
}

% PyMOSO: an open source Python numerical software library for solving multiobjective simulation optimization problems with integer and discrete variables via direct search / pattern search like techniques
@article{cooper2020pymoso,
	author = {Cooper, Kyle and Hunter, Susan R.},
	title = {{PyMOSO}: {S}oftware for multi-objective simulation optimization with {R-PERLE} and {R-MinRLE}},
	year = {2020},
	month = {4},
	journal = {INFORMS Journal on Computing},
	volume = {32},
	number = {4},
	pages = {1101--1108},
	publisher = {Institute for Operations Research and the Management Sciences (INFORMS)},
	doi = {10.1287/ijoc.2019.0902},
	url = {http://pubsonline.informs.org/doi/10.1287/ijoc.2019.0902},
	issn = {1091-9856},
	keywords = {software, open source, OSS, Python},
}

% RBFOpt an open source library for solving single-objective blackbox optimization
@article{costa2018rbfopt,
	author = {Costa, Alberto and Nannicini, Giacomo},
	title = {{RBFOpt}: an open-source library for black-box optimization with costly function evaluations},
	year = {2018},
	month = {12},
	journal = {Mathematical Programming Computation},
	volume = {10},
	number = {4},
	pages = {597--629},
	publisher = {Springer},
	doi = {10.1007/s12532-018-0144-7},
	url = {http://link.springer.com/10.1007/s12532-018-0144-7},
	issn = {1867-2949},
	keywords = {software, open source, OSS},
}

% ParEGO latest code and update introducing algorithmic updates, improved software quality, and (I think) some parallel computing -- ParEGO is the first open source numerical multiobjective bayesian optimization software package and written in C++. It is basically EGO (the original Bayesian optimization software using expected improvment acquisition) plus augmented Lagrangian scalarization. Available here: github.com/CristinaCristescu/ParEGO_Eigen
@inproceedings{cristescu2015surrogatebased,
	author = {Cristescu, Cristina and Knowles, Joshua},
	title = {Surrogate-based multiobjective optimization: {ParEGO} update and test},
	year = {2015},
	booktitle = {Workshop on Computational Intelligence (UKCI)},
	volume = {770},
	url = {https://www.cs.bham.ac.uk/~jdk/UKCI-2015.pdf},
	git = {https://github.com/CristinaCristescu/ParEGO_Eigen},
	keywords = {software, open source, OSS, C++, parallel programming},
}

% The exascale computing project press release
@misc{deanl2019press,
	title = {Press Release: {U.S.\ Department of Energy and Intel} to deliver first exascale supercomputer},
	year = {2019},
	month = {March},
	publisher = {{U.S.\ Department of Energy, Argonne National Laboratory}},
	url = {https://www.anl.gov/article/us-department-of-energy-and-intel-to-deliver-first-exascale-supercomputer},
	note = {Last accessed: April 28, 2020},
	keywords = {software, parallel programming, MPI, CUDA},
}

% CVXPY is an open source Python optimization and modeling language for solving convex optimization problems in a disciplined way (meaning that we ensure convexity through hard rules on the problem definition). From the lab of Stephen Boyd
@article{diamond2016cvxpy,
	author = {Diamond, Steven and Boyd, Stephen},
	title = {{CVXPY}: {A} {P}ython-embedded modeling language for convex optimization},
	year = {2016},
	journal = {Journal of Machine Learning Research},
	volume = {17},
	number = {83},
	pages = {1--5},
	url = {http://jmlr.org/papers/v17/15-408.html},
	keywords = {software, open source, OSS, Python},
}

% ECOS is an open source numerical software for solving second-order cone optimization problems, from the lab of Stephen Boyd. In my experience, this software is the best tool from Boyd's lab and the most robust to degeneracy
@inproceedings{domahidi2013ecos,
	author = {Domahidi, Alexander and Chu, Eric and Boyd, Stephen},
	title = {{ECOS}: {A}n {SOCP} solver for embedded systems},
	year = {2013},
	month = {7},
	booktitle = {European Control Conference (ECC)},
	pages = {3071--3076},
	organization = {IEEE},
	location = {Z{\"u}rich, Switzerland},
	doi = {10.23919/ECC.2013.6669541},
	url = {https://ieeexplore.ieee.org/document/6669541},
	keywords = {software, open source, OSS, C},
}

% Summary article on the history of the LINPACK of benchmark (the standard benchmark for HPC performance tuning and evaluation), which defines the HPC Top 500 list
@article{dongarra2003linpack,
	author = {Dongarra, Jack J. and Luszczek, Piotr and Petitet, Antoine},
	title = {The {LINPACK} benchmark: past, present, and future},
	year = {2003},
	month = {8},
	journal = {Concurrency and Computation: Practice and Experience},
	volume = {15},
	number = {9},
	pages = {803--820},
	publisher = {Wiley},
	doi = {10.1002/cpe.728},
	url = {https://onlinelibrary.wiley.com/doi/10.1002/cpe.728},
	issn = {1532-0626},
	keywords = {software, Fortran, parallel programming, benchmarking},
}

% Achieving performance portability of parallel codes in the exascale computing project (ECP) across various GPU-based architectures, which is challenging since different GPU vendors use different GPU programming libraries (e.g., CUDA for NVIDIA vs HIPP for AMD) -- high-quality re-usable open source software and software hardware codesign are cited as important issues from the software perspective, as well as performance portability (i.e., port between HIPP, CUDA, OpenMP, and SYCL/DPC++ for on-node parallelism)
@article{dubey2021performance,
	author = {Dubey, Anshu and McInnes, Lois Curfman and Thakur, Rajeev and Draeger, Erik W. and Evans, Thomas and Germann, Timothy C. and Hart, William E.},
	title = {Performance Portability in the {E}xascale {C}omputing {P}roject: Exploration Through a Panel Series},
	year = {2021},
	month = {9},
	journal = {Computing in Science \& Engineering},
	volume = {23},
	number = {5},
	pages = {46--54},
	publisher = {Institute of Electrical and Electronics Engineers (IEEE)},
	doi = {10.1109/MCSE.2021.3098231},
	url = {https://ieeexplore.ieee.org/document/9495114},
	issn = {1521-9615},
	keywords = {software, CUDA, MPI, OpenMP, parallel programming},
}

% The JuMP modeling language in Julia -- a modeling language for modeling and solving linear and nonlinear programming (optimization) problems in Julia. The implementation is an open source numerical software
@article{dunning2017jump,
	author = {Dunning, Iain and Huchette, Joey and Lubin, Miles},
	title = {{JuMP}: A Modeling Language for Mathematical Optimization},
	year = {2017},
	month = {1},
	journal = {SIAM Review},
	volume = {59},
	number = {2},
	pages = {295--320},
	publisher = {Society for Industrial & Applied Mathematics (SIAM)},
	doi = {10.1137/15M1020575},
	url = {https://epubs.siam.org/doi/10.1137/15M1020575},
	issn = {0036-1445},
	keywords = {software, open source, OSS, julia},
}

% jMetal is an open source numerical software library implementing multiobjective optimization solvers in Java. Last I checked, most of the solvers were heuristic methods such as evolutionary algorithms and/or simulated annealing. This is widely used in some fields of engineering
@article{durillo2011jmetal,
	author = {Durillo, Juan J. and Nebro, Antonio J.},
	title = {{jMetal}: A {J}ava framework for multi-objective optimization},
	year = {2011},
	month = {10},
	journal = {Advances in Engineering Software},
	volume = {42},
	number = {10},
	pages = {760--771},
	publisher = {Elsevier BV},
	doi = {10.1016/j.advengsoft.2011.05.014},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0965997811001219},
	issn = {0965-9978},
	keywords = {software, open source, OSS, Java},
}

% SimOpt is a really nice suite of real-world and real-world inspired simulation optimization problems. They are mostly stochastic. This is the standard benchmark suite in the operations research and business operations community. In order to publish work in those venues, one needs to perform well on these problems. The paper details how SimOpt has been refactored to provide new problems, features, reproducability, and better interfaces in the latest patch. The open source Python software is available at github.com/simopt-admin/simopt
@article{eckman2023simopt,
	author = {Eckman, David J. and Henderson, Shane G. and Shashaani, Sara},
	title = {{SimOpt}: A Testbed for Simulation-Optimization Experiments},
	year = {2023},
	month = {3},
	journal = {INFORMS Journal on Computing},
	volume = {35},
	number = {2},
	pages = {495--508},
	publisher = {INFORMS},
	address = {Linthicum, MD, USA},
	doi = {10.1287/ijoc.2023.1273},
	url = {https://pubsonline.informs.org/doi/10.1287/ijoc.2023.1273},
	issn = {1526-5528},
	keywords = {software, open source, OSS, Python},
}

% HPOBench is another suite of automl (hyperparameter tuning) benchmark problems from the automl research group. The problems can be configured to be either single or multi-fidelity. They can either be run tabular (meaning the raw data is accessed in a table and only configurations in the dataset can be evaluated) or with a regression model (XGBoost). The open source software is available for download in Python at: github.com/automl/HPOBench
@inproceedings{eggensperger2021hpobench,
	author = {Eggensperger, Katharina and M{\"u}ller, Philipp and Mallik, Neeratyoy and Feurer, Matthias and Sass, Rene and Klein, Aaron and Awad, Noor and Lindauer, Marius and Hutter, Frank},
	title = {{HPOB}ench: A Collection of Reproducible Multi-Fidelity Benchmark Problems for {HPO}},
	year = {2021},
	booktitle = {Thirty-fifth Conference on Neural Information Processing Systems Datasets and Benchmarks Track},
	url = {https://openreview.net/forum?id=1k4rJYEwda-},
	keywords = {software, open source, OSS, Python},
}

% The MDML open source software is a wrapper around Apache Kafka with protocols for fast data streaming and logging and dashboard generation. This framework was developed for usage at the material engineering research facility (MERF) at Argonne in order to facilitate the creation of a "smart lab" where MDML is the protocol for sending experiment requests to various equipment in the lab and logging results -- in an old (out-of-date branch) of ParMOO, this was a valid backend for launching simulation / experiment requests
@article{elias2020manufacturing,
	author = {Elias, Jakob R. and Chard, Ryan and Libera, Joseph A. and Foster, Ian T. and Chaudhuri, Santanu},
	title = {The Manufacturing Data and Machine Learning Platform: Enabling Real-time Monitoring and Control of Scientific Experiments via {IoT}},
	year = {2020},
	month = {6},
	journal = {2020 IEEE 6th World Forum on Internet of Things (WF-IoT)},
	pages = {1--2},
	publisher = {IEEE},
	address = {New Orleans, LA, USA},
	doi = {10.1109/WF-IoT48130.2020.9221078},
	url = {https://ieeexplore.ieee.org/document/9221078},
	git = {GitHub: \url{https://github.com/anl-mdml/MDML_Client}},
	keywords = {software, open source, OSS, Python, Kafka},
}

% Publication and whitepaper on Pathmind, an RL-based solver for simulation optimization problems. They also offer multiobjective support but only by using a priori scalarization provided by the user (so not real multiobjective support). This tool is not open source, it is a service provided by a YC startup of the same name. Therefore, it could be considered industry software
@inproceedings{farhan2020reinforcement,
	author = {Farhan, Mohammed and G{\"o}hre, Brett},
	title = {Reinforcement Learning in {AnyLogic} Simulation Models: A Guiding Example using {Pathmind}},
	year = {2020},
	month = {12},
	booktitle = {Proc. 2020 Winter Simulation Conference (WSC 2020)},
	pages = {3212--3223},
	organization = {IEEE},
	location = {Orlando, FL, USA},
	doi = {10.1109/WSC48552.2020.9383916},
	url = {https://ieeexplore.ieee.org/document/9383916},
	keywords = {software, Python},
}

% Fletcher's paper on how to handle degeneracy in active set methods for solving quadratic programming problems. This technique would become the basis for the BQPD software package, which is a recently open source (post mortem) numerical software for solving (degenerate) quadratic programs via active set methods
@article{fletcher1993resolving,
	author = {Fletcher, Roger},
	title = {Resolving degeneracy in quadratic programming},
	year = {1993},
	month = {9},
	journal = {Annals of Operations Research},
	volume = {46},
	number = {2},
	pages = {307--334},
	publisher = {Springer},
	doi = {10.1007/BF02023102},
	url = {http://link.springer.com/10.1007/BF02023102},
	issn = {0254-5330},
	keywords = {software, open source, OSS, Fortran},
}

% The DEAP framework is a Python framework for easily implementing and deploying parallel and distributed evolutionary algorithms. Fairly high quality open source software. This is widely used by optimization practitioners, e.g., engineers and scientists that read an evolutionary algorithm paper and want to try it out on their problem
@article{fortin2012deap,
	author = {Fortin, F\'elix-Antoine and {De Rainville}, Fran\c{c}ois-Michel and Gardner, Marc-Andr\'e and Parizeau, Marc and Gagn\'e ", Christian},
	title = {{DEAP}: Evolutionary Algorithms Made Easy},
	year = {2012},
	journal = {Journal of Machine Learning Research},
	volume = {13},
	number = {1},
	pages = {2171--2175},
	url = {https://www.jmlr.org/papers/v13/fortin12a.html},
	keywords = {software, open source, OSS, Python, parallel programming, MPI},
}

% Official MPI 4.1 standard document for distributed computing via a message passing interface in C and Fortran
@techreport{forum2023mpi,
	author = {Forum, Message Passing Interface},
	title = {{MPI}: A Message-Passing Interface Standard},
	year = {2023},
	month = {nov},
	number = {version 4.1},
	url = {https://www.mpi-forum.org/docs/mpi-4.1/mpi41-report.pdf},
	keywords = {software, Fortran, C, MPI},
}

% PyCUTEst is a very nice, easily installed open source Python wrapper for the CUTEst test suite for benchmarking blackbox optimization problems. The CUTEst software is the standard suite of constrained and unconstrained test problems for derivative-free / blackbox / simulation optimization problems. CUTEst is available open source and written in Fortran, but now offer C, Python, Matlab, and Julia interfaces (plus the default command line interface). Available for download at: github.com/jfowkes/pycutest
@article{fowkes2022pycutest,
	author = {Fowkes, Jaroslav and Roberts, Lindon and Bűrmen, Árpád},
	title = {PyCUTEst: an open source Python package of optimization test problems},
	year = {2022},
	month = {10},
	journal = {Journal of Open Source Software},
	volume = {7},
	number = {78},
	numpages = {4377},
	publisher = {The Open Journal},
	doi = {10.21105/joss.04377},
	url = {https://joss.theoj.org/papers/10.21105/joss.04377},
	issn = {2475-9066},
	keywords = {software, open source, OSS, Fortran, Python, benchmarking},
}

% Landmark textbook on standard design patterns in software engineering, such as builders, factories, observers, etc. Nicknamed the "Gang of Four" book on design patters
@book{gamma1995design,
	author = {Gamma, Erich and Helm, Richard and Johnson, Ralph and Vlissides, John},
	title = {Design patterns: elements of reusable object-oriented software},
	year = {1995},
	publisher = {Addison-Wesley},
	address = {Reading, MA, USA},
	isbn = {0-201-63361-2},
    url = {https://en.wikipedia.org/wiki/Design_Patterns},
	keywords = {software},
}

% An article on the benefits of co design of algorithms and software and hardware in the context of the DOE's exascale computing project (ECP)
@article{germann2021codesign,
	author = {Germann, Timothy C.},
	title = {Co-design in the {Exascale Computing Project}},
	year = {2021},
	month = {11},
	journal = {The International Journal of High Performance Computing Applications},
	volume = {35},
	number = {6},
	pages = {503--507},
	publisher = {SAGE Publications Sage UK: London, England},
	doi = {10.1177/10943420211059380},
	url = {https://journals.sagepub.com/doi/10.1177/10943420211059380},
	issn = {1094-3420},
	keywords = {software, CUDA, OpenMP, MPI, parallel programming},
}

% Open source numerical software for the Delaunay density diagnostic -- using the Delaunay interpolant to calculate whether they have enough data to resolve the geometry of a problem for interpolation in the context of SciML. Essentially, they use DelaunaySparse to make predictions and slowly add data. Once they have enough data, the predictions begin converging at a linear rate. Then they have enough data to use whatever method they want to solve the problem
@article{gillette2024algorithm,
	author = {Gillette, Andrew and Kur, Eugene},
	title = {Algorithm 1049: The Delaunay Density Diagnostic},
	year = {2024},
	month = {12},
	journal = {ACM Trans. Math. Softw.},
	volume = {50},
	number = {4},
	articleno = {24},
	numpages = {21},
	publisher = {Association for Computing Machinery},
	doi = {10.1145/3700134},
	url = {https://doi.org/10.1145/3700134},
	issn = {0098-3500},
	keywords = {software, Python},
}

% Google's OSS Vizier service is a (now open source) blackbox / derivative-free optimization numerical software package and service. As far as I can tell, the package is primarily used for solving system optimization and A/B testing type problems
@inproceedings{golovin2017google,
	author = {Golovin, Daniel and Solnik, Benjamin and Moitra, Subhodeep and Kochanski, Greg and Karro, John and Sculley, D.},
	title = {{Google Vizier}: A Service for Black-Box Optimization},
	year = {2017},
	month = {8},
	booktitle = {Proc. 23rd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (KDD '17)},
	pages = {1487--1495},
	organization = {ACM},
	location = {Halifax, NS, Canada},
	doi = {10.1145/3097983.3098043},
	url = {https://dl.acm.org/doi/10.1145/3097983.3098043},
	keywords = {software, open source, OSS, Python},
}

% Classical textbook that serves as the "bible" of matrix computations and computational linear algebra -- contains all the standard factorizations, the common algorithms for computing them, and their sensitiviy analyses, pivoting, some basic approximation theory, and the basics of iterative methods
@book{golub2013matrix,
	author = {Golub, Gene H. and Van Loan, Charles F.},
	title = {Matrix computations},
	year = {2013},
	edition = {4th},
	publisher = {Johns Hopkins University Press},
	doi = {10.56021/9781421407944},
	url = {https://www.press.jhu.edu/books/title/10678/matrix-computations},
	isbn = {978-1421407944},
	keywords = {software},
}

% The CUTEst software is the standard suite of constrained and unconstrained test problems for derivative-free / blackbox / simulation optimization problems. CUTEst is available open source and written in Fortran, but now offer C, Python, Matlab, and Julia interfaces (plus the default command line interface). Available for download at: github.com/ralna/CUTEst
@article{gould2015cutest,
	author = {Gould, Nicholas I. M. and Orban, Dominique and Toint, Philippe L.},
	title = {{CUTEst}: a Constrained and Unconstrained Testing Environment with safe threads for mathematical optimization},
	year = {2015},
	month = {4},
	journal = {Computational Optimization and Applications},
	volume = {60},
	number = {3},
	pages = {545--557},
	publisher = {Springer Science and Business Media LLC},
	doi = {10.1007/s10589-014-9687-3},
	url = {https://doi.org/10.1007/s10589-014-9687-3},
	issn = {0926-6003},
	keywords = {software, open source, OSS, Fortran, Python, Matlab, Julia, benchmarking},
}

% The OpenMDAO open source numerical software library for modeling and solving multidisciplinary engineering design optimization problems. Combines surrogate modeling, gradient based optimization, parallel computing frameworks, and derivative-free optimization techniques in one package so in order to solve large mixed-variable blackbox optimization problems. Developed by NASA Glenn
@article{gray2019openmdao,
	author = {Gray, Justin S. and Hwang, John T. and Martins, Joaquim R.R.A. and Moore, Kenneth T. and Naylor, Bret A.},
	title = {{OpenMDAO}: An open-source framework for multidisciplinary design, analysis, and optimization},
	year = {2019},
	month = {4},
	journal = {Structural and Multidisciplinary Optimization},
	volume = {59},
	number = {4},
	pages = {1075--1104},
	publisher = {Springer},
	doi = {10.1007/s00158-019-02211-z},
	url = {http://link.springer.com/10.1007/s00158-019-02211-z},
	issn = {1615-147X},
	keywords = {software, open source, OSS, Python},
}

% Platypus: an open source numerical software package for performing multiobjective optimization in Python and comparing results
@techreport{hadka2015platypus,
	author = {Hadka, David},
	title = {Platypus -- multiobjective optimization in {P}ython},
	year = {2015},
	number = {Version 1.0.4},
	institution = {GitHub},
	url = {https://platypus.readthedocs.io/en/latest},
	keywords = {software, open source, OSS, Python},
}

% Hanson's Fortran numerical software for solving equality constrained nonnegative least-squares (NNLS) problems via an iterative weighted least squares (WNNLS) solver. This is the default constrained least-squares optimization problem solver in the Fortran library SLATEC from Sandia
@article{hanson1982algorithm,
	author = {Hanson, Richard J. and Haskell, Karen H.},
	title = {Algorithm 587: Two Algorithms for the Linearly Constrained Least Squares Problem},
	year = {1982},
	month = {9},
	journal = {ACM Trans. Math. Softw.},
	volume = {8},
	number = {3},
	pages = {323--333},
	publisher = {ACM},
	address = {New York, NY, USA},
	doi = {10.1145/356004.356010},
	url = {https://dl.acm.org/doi/10.1145/356004.356010},
	issn = {0098-3500},
	keywords = {software, Fortran},
}

% The official publication of the open source numerical software numpy: the standard for basic multivariable computations, vector operations, and simple linear algebra in Python
@article{harris2020array,
	author = {Harris, Charles R. and Millman, K. Jarrod and Walt, St{\'{e}}fan J. van der and Gommers, Ralf and Virtanen, Pauli and Cournapeau, David and Wieser, Eric and Taylor, Julian and Berg, Sebastian and Smith, Nathaniel J. and Kern, Robert and Picus, Matti and Hoyer, Stephan and Kerkwijk, Marten H. van and Brett, Matthew and Haldane, Allan and R{\'{i}}o, Jaime Fern{\'{a}}ndez del and Wiebe, Mark and Peterson, Pearu and G{\'{e}}rard-Marchant, Pierre and Sheppard, Kevin and Reddy, Tyler and Weckesser, Warren and Abbasi, Hameer and Gohlke, Christoph and Oliphant, Travis E.},
	title = {Array programming with {NumPy}},
	year = {2020},
	month = {9},
	journal = {Nature},
	volume = {585},
	number = {7825},
	pages = {357--362},
	publisher = {Springer Science and Business Media {LLC}},
	doi = {10.1038/s41586-020-2649-2},
	url = {https://www.nature.com/articles/s41586-020-2649-2},
	issn = {0028-0836},
	keywords = {software, open source, OSS, Python},
}

% The official textbook on the Pyomo modeling language: an open source optimization modeling language and scientific software developed at Sandia by Bill Hart et al. Pyomo is a standard for solving large-scale mathematical programming (linear and nonlinear optimization) problems in Python
@book{hart2017pyomo,
	author = {Hart, William E. and Laird, Carl D. and Watson, Jean-Paul and Woodruff, David L. and Hackebeil, Gabriel A. and Nicholson, Bethany L. and Siirola, John D.},
	title = {Pyomo -- optimization modeling in {P}ython},
	year = {2017},
	booktitle = {Springer Optimization and Its Applications},
	series = {Springer Optimization and Its Applications},
	edition = {2},
	publisher = {Springer Cham},
	address = {Cham, Switzerland},
	doi = {10.1007/978-3-319-58821-6},
	url = {http://link.springer.com/10.1007/978-3-319-58821-6},
	isbn = {9783319588193},
	issn = {1931-6828},
	keywords = {software, open source, OSS, Python},
}

% Chimera: a scientific software package for steering self-driving labs via multiobjective optimization -- the software is similar to what we did with ParMOO + MDML in the MERF at Argonne. They focus on applications in robot calibration and molecular system design. The multiobjective component helps them to explore the solution space with experimentation
@article{hase2018chimera,
	author = {H{\"a}se, Florian and Roch, Lo{\"\i}c M and Aspuru-Guzik, Al{\'a}n},
	title = {Chimera: enabling hierarchy based multi-objective optimization for self-driving laboratories},
	year = {2018},
	journal = {Chemical science},
	volume = {9},
	number = {39},
	pages = {7642--7655},
	publisher = {Royal Society of Chemistry},
	doi = {10.1039/C8SC02239A},
	url = {https://xlink.rsc.org/?DOI=C8SC02239A},
	issn = {2041-6520},
	keywords = {software, open source, OSS, Python},
}

% VTDIRECT95 reference: a high-performance parallel Fortran implementation of the famous single-objective blackbox (direct search) optimization algorithm DIRECT. The numerical software is now open source (maintained by me) on Dr. Watson's GitHub page.
@article{he2009algorithm,
	author = {He, Jian and Watson, Layne T. and Sosonkina, Masha},
	title = {Algorithm 897: {VTDIRECT95}: Serial and Parallel Codes for the Global Optimization Algorithm {DIRECT}},
	year = {2009},
	month = {7},
	journal = {ACM Transactions on Mathematical Software},
	volume = {36},
	number = {3},
	numpages = {17},
	publisher = {Association for Computing Machinery (ACM)},
	doi = {10.1145/1527286.1527291},
	url = {https://dl.acm.org/doi/10.1145/1527286.1527291},
	issn = {0098-3500},
	keywords = {software, open source, OSS, Fortran, parallel programming, MPI},
}

% The original ResNet paper, which proposes the usage of residual layers to help solve the vanishing gradient problem when training deep neural networks. This technique is still used today in training LLMs. The original paper is applied to image segmentation and classification problems (on CIFAR-10 and ImageNet) and the resulting models ResNet-50, -101, and -152 were considered state-of-the-art. While the author's original model and weights are available open source, they recommend using FAIR's repo which also contains open source training in pytorch: github.com/facebookarchive/fb.resnet.torch
@inproceedings{he2016deep,
	author = {He, Kaiming and Zhang, Xiangyu and Ren, Shaoqing and Sun, Jian},
	title = {Deep Residual Learning for Image Recognition},
	year = {2016},
	month = {6},
	booktitle = {2016 IEEE Conference on Computer Vision and Pattern Recognition (CVPR)},
	pages = {770--778},
	organization = {IEEE},
	location = {Las Vegas, NV, USA},
	doi = {10.1109/CVPR.2016.90},
	url = {https://arxiv.org/pdf/1512.03385},
	keywords = {software, open source, OSS, Python},
}

% The better scientific software tech report, with recommendations and rules of thumb for improving the quality of scientific software within the DOE
@techreport{heroux2020advancing,
	author = {Heroux, Michael A. and McInnes, Lois and Bernholdt, David E. and Dubey, Anshu and Gonsiorowski, Elsa and Marques, Osni and Moulton, J. David and Norris, Boyana and Raybourn, Elaine and Balay, Satish and Bartlett, Roscoe A. and Childers, Lisa and Gamblin, Todd and Grubel, Patricia and Gupta, Rinku and Hartman-Baker, Rebecca and Hill, Judith C. and Hudson, Stephen and Junghans, Christoph and Klinvex, Alicia and Milewicz, Reed and Miller, Mark and Ah Nam, Hai and O'Neal, Jared and Riley, Katherine and Sims, Ben and Schuler, Jean and Smith, Barry F. and Vernon, Louis and Watson, Gregory R. and Willenbring, James and Wolfenbarger, Paul},
	title = {Advancing Scientific Productivity through Better Scientific Software: Developer Productivity and Software Sustainability Report},
	year = {2020},
	month = {1},
	number = {ORNL TM-2020 1459 / ECP-U-RPT-2020-0001},
	institution = {Oak Ridge National Laboratory},
	address = {Oak Ridge, TN, USA},
	doi = {10.2172/1606662},
	url = {https://www.osti.gov/servlets/purl/1606662},
	keywords = {software},
}

% The official CGAL User Guide docs page for computing high-dimensional convex hulls and Delaunay triangulations. CGAL is a standard numerical software package for using computational geometry data structures and algorithms in perfect precision (via symbolic arithmetic). CGAL is a header-only open source C++ library
@incollection{hert2020convex,
	author = {Hert, Susan and Seel, Michael},
	title = {{dD} Convex Hulls and {D}elaunay Triangulations},
	year = {2020},
	booktitle = {{CGAL} User and Reference Manual},
	edition = {{5.0.2}},
	publisher = {{CGAL Editorial Board}},
	url = {https://doc.cgal.org/5.0.2/Manual/packages.html#PkgConvexHullD},
	keywords = {software, open source, OSS, C++},
}

% Cpp-Taskflow original paper on open source software implementing a task-based parallel scheduler and parallel programming interface in C++
@inproceedings{huang2019cpptaskflow,
	author = {Huang, Tsung-Wei and Lin, Chun-Xun and Guo, Guannan and Wong, Martin},
	title = {{Cpp-Taskflow}: Fast Task-Based Parallel Programming Using Modern {C++}},
	year = {2019},
	month = {5},
	booktitle = {2019 IEEE International Parallel and Distributed Processing Symposium (IPDPS)},
	volume = {},
	number = {},
	pages = {974--983},
	organization = {IEEE},
	location = {Rio de Janeiro, Brazil},
	doi = {10.1109/IPDPS.2019.00105},
	url = {https://ieeexplore.ieee.org/document/8821011/},
	keywords = {software, open source, OSS, parallel programming, C++},
}

% The official publication for HiGHS numerical optimization open source software package and solver for linear programming problems. The first successful effort to parallelize a simplex method based solver, specifically, they have successfully parallelized the dual revised simplex approach. HiGHS is now the default solver in most scipy.optimize. HiGHS is written in C++ with Fortran, C, and Python interfaces -- support CPU and GPU parallelism, the authors don't get perfect scaling by any means but this is the first successful effort to parallelize linear programming and still an achievement
@article{huangfu2018parallelizing,
	author = {Huangfu, Qi and Hall, JA Julian},
	title = {Parallelizing the dual revised simplex method},
	year = {2018},
	month = {3},
	journal = {Mathematical Programming Computation},
	volume = {10},
	number = {1},
	pages = {119--142},
	publisher = {Springer},
	doi = {10.1007/s12532-017-0130-5},
	url = {http://link.springer.com/10.1007/s12532-017-0130-5},
	issn = {1867-2949},
	keywords = {software, open source, OSS, Fortran, Python, CUDA, parallel programming, C++},
}

% The official JOSS paper for libEnsemble: an open source software library for performing parallel and distributed computations involving ensembles of computationally expensive function evaluations in Python
@techreport{hudson2023libensemble,
	author = {Hudson, Stephen and Larson, Jeffrey and Navarro, John-Luke and Wild, Stefan M.},
	title = {{libEnsemble: A} complete {Python} toolkit for dynamic ensembles of calculations},
	year = {2023},
	month = {12},
	booktitle = {Journal of Open Source Software},
	volume = {8},
	number = {92},
	numpages = {6031},
	institution = {The Open Journal},
	doi = {10.21105/joss.06031},
	url = {https://joss.theoj.org/papers/10.21105/joss.06031},
	issn = {2475-9066},
	keywords = {software, open source, OSS, Python, parallel programming, MPI},
}

% The official Intel TBB developer guide / reference for efficient and performance portable task-based parallel programming using a dynamic scheduler with work-stealing in modern C++. The open source software library can be downloaded from GitHub. They also offer limited NUMA support in the latest version
@misc{intel2025oneapi,
	author = {Intel, },
	title = {{oneAPI} Threading Building Blocks ({oneTBB})},
	year = {2025},
	number = {release 2022.1.0},
	publisher = {Intel Corporation},
	url = {https://uxlfoundation.github.io/oneTBB},
	note = {Last accessed: Apr 28, 2025},
	keywords = {software, open source, OSS, parallel programming, C++},
}

% ISO Fortran 2003 software standard -- definition of the Fortran 2003 standard
@techreport{ios2004information,
	title = {{Information technology -- Programming languages -- Fortran -- Part 1: Base Language}},
	year = {2004},
	month = {November},
	number = {ISO/IEC 1539-1:2004(E)},
	institution = {International Organization for Standardization},
	address = {Geneva, Switzerland},
    url = {https://j3-fortran.org/doc/year/04/04-007.pdf},
	keywords = {software, Fortran},
}

% ISO Fortran 2008 software standard -- definition of the Fortran 2008 standard
@techreport{ios2010information,
	title = {{Information technology -- Programming languages -- Fortran -- Part 1: Base Language}},
	year = {2010},
	month = {October},
	number = {ISO/IEC 1539-1:2010(E)},
	institution = {International Organization for Standardization},
	address = {Geneva, Switzerland},
    url = {https://j3-fortran.org/doc/year/10/10-007.pdf},
	keywords = {software, Fortran},
}

% The specific BPE tokenizer used by OpenAI in all their LLMs
@misc{jain2022tiktoken,
	author = {Jain, Shantanu and others, },
	title = {tiktoken},
	year = {2022},
	booktitle = {GitHub repository},
	number = {0.9.0},
	publisher = {GitHub},
	git = {https://github.com/openai/tiktoken},
	note = {Last accessed: May 4, 2025},
	keywords = {software, open source, OSS, Python},
}

% A modification to the original Sobol sequence generator code
@article{joe2003remark,
	author = {Joe, Stephen and Kuo, Frances Y.},
	title = {Remark on Algorithm 659: Implementing Sobol's Quasirandom Sequence Generator},
	year = {2003},
	month = {3},
	journal = {ACM Transactions on Mathematical Software},
	volume = {29},
	number = {1},
	numpages = {9},
	publisher = {Association for Computing Machinery},
	doi = {10.1145/641876.641879},
	url = {https://dl.acm.org/doi/10.1145/641876.641879},
	issn = {0098-3500},
	keywords = {software, Fortran},
}

% Charm++ original paper introducing open source software for parallel programming in C++ via message-passing objects called "chares"
@inproceedings{kale1993charm,
	author = {Kale, Laxmikant V. and Krishnan, Sanjeev},
	title = {{CHARM++}: a portable concurrent object oriented system based on {C++}},
	year = {1993},
	month = {10},
	booktitle = {Proceedings of the Eighth Annual Conference on Object-Oriented Programming Systems, Languages, and Applications},
	series = {OOPSLA '93},
	numpages = {18},
	organization = {Association for Computing Machinery},
	location = {Washington, D.C., USA},
	doi = {10.1145/165854.165874},
	url = {https://dl.acm.org/doi/10.1145/165854.165874},
	isbn = {0897915879},
	keywords = {software, open source, OSS, parallel programming, C++},
}

% Introducing Dragonfly: an open source numerical software package for solving neural architecture search problems via Bayesian optimization and solving an optimal transport problem to evaluate the distance between two networks. Considered a bit of a landmark paper for neural network architecture search problems. The open source Python software is widely used for a variety of applications outside NAS, including molecular discovery
@article{kandasamy2020tuning,
	author = {Kandasamy, Kirthevasan and Vysyaraju, Karun Raju and Neiswanger, Willie and Paria, Biswajit and Collins, Christopher R. and Schneider, Jeff and Poczos, Barnabus and Xing, Eric P.},
	title = {Tuning Hyperparameters without Grad Students: Scalable and Robust {Bayesian} Optimisation with {Dragonfly}},
	year = {2020},
	journal = {Journal of Machine Learning Research},
	volume = {21},
	number = {81},
	pages = {1--27},
	url = {http://jmlr.org/papers/v21/18-223.html},
	git = {http://github.com/dragonfly/dragonfly},
	keywords = {software, open source, OSS, Python},
}

% Official documentation and techreport for the widely-used multilevel hypergraph partitioning software hMETIS, which is a standard in partitioning based placement
@techreport{karypis1998hmetis,
	author = {Karypis, George and Kumar, Vipin},
	title = {{hMETIS}: A hypergraph partitioning package},
	year = {1998},
	number = {version 1.5.3},
	institution = {Department of Computer Science \& Engineering, University of Minnesota},
	address = {Minneapolis, MN, USA},
	url = {https://course.ece.cmu.edu/~ee760/760docs/hMetisManual.pdf},
	keywords = {software},
}

% Original libnuma paper (now dated) introducing the widely used libnuma software providing a C interface for portably binding threads to NUMA nodes on linux and unix systems
@techreport{kleen2005numa,
	author = {Kleen, Andi},
	title = {A {NUMA} {API} for {Linux}},
	year = {2005},
	institution = {Suse Lab},
    url = {https://halobates.de/numaapi3.pdf},
	keywords = {software, parallel programming, C},
}

% The SORCER software is a service oriented computing environment used by the US Airforce research lab (AFRL) to distribute expensive computations (such as design optimizations) across their large distributed network of computing resources
@inproceedings{kolonay2011service,
	author = {Kolonay, Raymond M. and Sobolewski, Michael},
	title = {Service oriented computing environment ({SORCER}) for large scale, distributed, dynamic fidelity aeroelastic analysis},
	year = {2011},
	booktitle = {International Forum on Aeroelasticity and Structural Dynamics (IFASD 2011), Optimization},
	pages = {26--30},
	organization = {Citeseer},
	location = {Paris, France},
	url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.656.7539},
	keywords = {software, Java, parallel programming},
}

% Original Kafka paper: a fully-distributed, scalable message-passing and log processing interface. A Kafka system consists of producer, consumer, and broker processes / nodes. Producers generate logs/messages and consumers subscribte to log/message streams from producers. When a producer generates a new message or log, it publishes that message to a given topic. Those topics are broken up into sequential partitions and distributed across the broker nodes. The broker nodes and their partitions are all stateless. Consumers are placed in groups, with each group subscribing to a topic. Each group will read messages/logs from a specific topic, with a guarantee that each partition is read sequentially, but messages from different partitions will be read in any order. They guarantee that each group will read each message in their subscribed topics at least once. Groups store all state information locally, and therefore have the ability to roll-back and replay a topic from any offset. The original application is for distributing LinkedIn messages. Kafka is a standard in scalable distributed message/log streaming, and created the paradigm of subscribable topics. The official open-source implementation is Apache Kafka https://github.com/apache/kafka
@inproceedings{kreps2011kafka,
	author = {Kreps, Jay and Narkhede, Neha and Rao, Jun and others, },
	title = {Kafka: A distributed messaging system for log processing},
	year = {2011},
	booktitle = {Proceedings of the NetDB},
	volume = {11},
	number = {2011},
	pages = {1--7},
	organization = {Athens, Greece},
	url = {https://www.microsoft.com/en-us/research/wp-content/uploads/2017/09/Kafka.pdf},
	keywords = {software, open source, OSS, Kafka},
}

% NOMAD v3 is a widely-used open source numerical software package (in C++) for blackbox and derivative-free optimization via the MADS algorithms. Includes the official implementations of algorithms such as Ortho-MADS, PSD-MADS, and BiMADS. Support for parallel computing and surrogate modeling, and fairly extensible. Can be linked as a C++ library, or usage from command line interface. Used by a variety of industries and officially supported by Exxon Mobile. Has recently been replaced by the major refactor/rewrite in NOMAD v4. Still an example of widely-used open source numerical software, but the NOMAD v4 paper gives a look at how open source software practices have changed (improved) in the last 10 years
@article{ledigabel2011algorithm,
	author = {Le Digabel, S{\'e}bastien},
	title = {Algorithm 909: {NOMAD}: Nonlinear Optimization with the {MADS} Algorithm},
	year = {2011},
	month = {2},
	journal = {ACM Transactions on Mathematical Software},
	volume = {37},
	number = {4},
	numpages = {44},
	publisher = {Association for Computing Machinery (ACM)},
	doi = {10.1145/1916461.1916468},
	url = {https://dl.acm.org/doi/10.1145/1916461.1916468},
	issn = {0098-3500},
	keywords = {software, open source, OSS, parallel programming, C++, C},
}

% pyDOE a popular software repository for the common design-of-experiments in Python. This has been widely replaced by the new release of scipy which includes scipy.stats.qmc, which includes most of these techniques (used for monte carlo sampling, but still the same techniques)
@misc{lee2015pydoe,
	author = {Lee, Abraham D. and others, },
	title = {py{DOE}: The experimental design package for python},
	year = {2015},
	booktitle = {GitHub repository},
	number = {0.3.8},
	publisher = {GitHub},
	url = {https://github.com/tisimst/pyDOE},
	note = {Last accessed: Nov 2022},
	keywords = {software, open source, OSS, Python},
}

% Offifial publication for the AMF-Placer 2.0 paper, which is an open-source analytical placer using quadratic programming for global placement and simulated annealing for detailed placement. Written primarily in C++ and available at github.com/zslwyuan/AMF-Placer
@article{liang2024amfplacer,
	author = {Liang, Tingyuan and Chen, Gengjie and Zhao, Jieru and Sinha, Sharad and Zhang, Wei},
	title = {{AMF-Placer 2.0}: Open-Source Timing-Driven Analytical Mixed-Size Placer for Large-Scale Heterogeneous {FPGA}},
	year = {2024},
	month = {9},
	journal = {IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems},
	volume = {43},
	number = {9},
	pages = {2769--2782},
	publisher = {Institute of Electrical and Electronics Engineers (IEEE)},
	doi = {10.1109/TCAD.2024.3373357},
	url = {https://ieeexplore.ieee.org/document/10459236/},
	issn = {0278-0070},
	keywords = {software, open source, OSS, C++},
}

% The official publication of SMAC3 -- the latest version of SMAC from the automl group. SMAC was the first hyperparameter optimization and neural architecture search software to use random forest surrogates for modeling the hyperparameter configuration space. They also use a hierarchy of hyperparameters to handle "hidden parameters". They support multi and single-fidelity NAS applications. The open source software is written in Python and available from: github.com/automl/SMAC3
@article{lindauer2022smac3,
	author = {Lindauer, Marius and Eggensperger, Katharina and Feurer, Matthias and Biedenkapp, André and Deng, Difan and Benjamins, Carolin and Ruhkopf, Tim and Sass, René and Hutter, Frank},
	title = {{SMAC3}: A Versatile Bayesian Optimization Package for Hyperparameter Optimization},
	year = {2022},
	journal = {Journal of Machine Learning Research},
	volume = {23},
	number = {54},
	pages = {1--9},
	url = {http://jmlr.org/papers/v23/21-0888.html},
	keywords = {software, open source, OSS, Python},
}

% The official GitHub account for the DFO-lib -- open source numerical software in Fortran for solving blackbox optimization and multiobjective optimization problems. The library used to be obtained via download from Liuzzi's personal website, where it was referred to as the DFO lib. In 2024 it appears to have been migrated to a GitHub account, with each individual piece of software in its own separate repository. Therefore, any reference to the DFO-lib must now be directed to the account as a whole, not an individual repository.
@misc{liuzzi2024dfolib,
	author = {Liuzzi, Giampaolo and others, },
	title = {DFO-lib},
	year = {2024},
	booktitle = {GitHub repository},
	number = {0.3.8},
	publisher = {GitHub},
	url = {https://github.com/DerivativeFreeLibrary},
	note = {Last accessed: Jul 2024},
	keywords = {software, open source, OSS, Fortran},
}

% NSGA-Net is the NSGA-II/pymoo team's multiobjective genetic algorithm based NAS solver. The open source python software is available from: github.com/ianwhale/nsga-net
@article{lu2018nsganet,
	author = {Lu, Zhichao and Whalen, Ian and Boddeti, Vishnu and Dhebar, Yashesh and Deb, Kalyanmoy and Goodman, Erik and Banzhaf, Wolfgang},
	title = {NSGA-NET: a multi-objective genetic algorithm for neural architecture search},
	year = {2018},
	journal = {GECCO-2019},
	keywords = {software, open source, OSS, Python},
}

% Official citation for the open source numerical Python software for evaluating SHAP scores for interpreting feature importance in a model agnostic way for various machine learning (primarily scientific machine learning) applications. Very popular in many fields, including finance, computational medicine, etc. github.com/shap/shap Based on the original publication by Shapley + some additional methods and improvements proposed by the authors and previous works
@inproceedings{lundberg2017unified,
	author = {Lundberg, Scott M and Lee, Su-In},
	editor = {Guyon, I. and Luxburg, U. V. and Bengio, S. and Wallach, H. and Fergus, R. and Vishwanathan, S. and Garnett, R.},
	title = {A Unified Approach to Interpreting Model Predictions},
	year = {2017},
	booktitle = {Advances in Neural Information Processing Systems 30},
	pages = {4765--4774},
	organization = {Curran Associates, Inc.},
	url = {http://papers.nips.cc/paper/7062-a-unified-approach-to-interpreting-model-predictions.pdf},
	keywords = {software, open source, OSS, Python},
}

% Latest version of VPR, documenting new features and support -- very little mention of changes (if any) to the actual placement algorithms though
@article{luu2011vpr,
	author = {Luu, Jason and Kuon, Ian and Jamieson, Peter and Campbell, Ted and Ye, Andy and Fang, Wei Mark and Kent, Kenneth and Rose, Jonathan},
	title = {{VPR} 5.0: {FPGA CAD} and architecture exploration tools with single-driver routing, heterogeneity and process scaling},
	year = {2011},
	month = {12},
	journal = {ACM Trans. Reconfigurable Technol. Syst.},
	volume = {4},
	number = {4},
	articleno = {32},
	numpages = {23},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	doi = {10.1145/2068716.2068718},
	url = {https://doi.org/10.1145/2068716.2068718},
	issn = {1936-7406},
	keywords = {software, open source, OSS, C++, Verilog},
}

% Thomas' open source montone quintic spline interpolation software -- a high order spline interpolant implemented in modern Fortran. Really nice high performance numerical software. Available open source on Dr. Watson's GitHub. His main application was distribution modeling, but I think for noisy data, lower order methods may actually be more robust
@article{lux2023algorithm,
	author = {Lux, Thomas C. H. and Watson, Layne T. and Chang, Tyler H. and Thacker, William I.},
	title = {Algorithm 1031: {MQSI}---{M}onotone quintic spline interpolation},
	year = {2023},
	month = {3},
	journal = {ACM Transactions on Mathematical Software},
	volume = {49},
	number = {1},
	articleno = {6},
	numpages = {17},
	publisher = {Association of Computing Machinery},
	doi = {10.1145/3570157},
	url = {https://dl.acm.org/doi/10.1145/3570157},
	issn = {0098-3500},
	keywords = {software, open source, OSS, Fortran},
}

% pyMDO: an open source numerical Python framework for modeling and solving multidisciplinary engineering design optimization problems
@article{martins2009pymdo,
	author = {Martins, Joaquim R. R. A. and Marriage, Christopher and Tedford, Nathan},
	title = {{pyMDO}: An Object-Oriented Framework for Multidisciplinary Design Optimization},
	year = {2009},
	month = {8},
	journal = {ACM Transactions on Mathematical Software},
	volume = {36},
	number = {4},
	numpages = {20},
	publisher = {ACM},
	doi = {10.1145/1555386.1555389},
	url = {https://dl.acm.org/doi/10.1145/1555386.1555389},
	issn = {0098-3500},
	keywords = {software, open source, OSS, Python},
}

% Python wrapper around the open source numerical simulation software superfish We used this when performing particle accelerator RF gun cavity optimization at Argonne in order to provide a bridge between POISSON/SUPERFISH (Fortran codes) and the ParMOO optimizer (a Python code)
@misc{mayes2023pysuperfish,
	author = {Mayes, Christopher},
	title = {PySuperfish},
	year = {2023},
	url = {https://github.com/ChristopherMayes/PySuperfish},
	note = {Last accessed: Aug 2023},
	keywords = {software, open source, OSS, Fortran, Python},
}

% The POISSON/SUPERFISH open source numerical software (in Fortran) for calculating static, magnetic, and electric fields and rf electromagnetic fields. Used to design particle accelerators, developed and maintained by Los Alamos
@techreport{menzel1987users,
	author = {Menzel, M. T. and Stokes, H. K.},
	title = {Users guide for the {POISSON/SUPERFISH} group of codes},
	year = {1987},
	month = {1},
	number = {LA-UR-87-115},
	institution = {Los Alamos National Laboratory},
	address = {Los Alamos, NM, USA},
	doi = {10.2172/10140823},
	url = {https://www.osti.gov/servlets/purl/10140823},
	keywords = {software, open source, OSS, Fortran},
}

% Original word2vec publication: embedding words into a continuous vector space in a "dense" way, meaning that the embedding is somewhat minimal and no extra dimensions are added and word relationships are preserved (as in semantic regularization). The authors show that a relatively small and simple model with semantic regularization is sufficient to train such an embedding in less than a day, and the resulting word2vec embedding layer is fast and cheap to evaluate. The word2vec embedding would go on to be the basis for most early transformer models. Modern LLMs train their own embedding as the embedding layers of the network, but use the same techniques as word2vec. The open source software is available for download from Google: https://code.google.com/archive/p/word2vec
@inproceedings{mikolov2013efficient,
	author = {Mikolov, Tomas and Chen, Kai and Corrado, Greg and Dean, Jeffrey},
	title = {Efficient estimation of word representations in vector space},
	year = {2013},
	booktitle = {1st International Conference on Learning Representations (ICLR 2013)},
	location = {Scottsdale, AZ, USA},
	url = {https://openreview.net/forum?id=idpCdOWtqXd60&noteld=C8Vn84fq},
	keywords = {software},
}

% Report on challenges and experiences gained in porting PETSc to GPUs for the exascale computing project
@article{mills2021toward,
	author = {Mills, Richard Tran and Adams, Mark F. and Balay, Satish and Brown, Jed and Dener, Alp and Knepley, Matthew and Kruger, Scott E. and Morgan, Hannah and Munson, Todd and Rupp, Karl and Smith, Barry F. and Zampini, Stefano and Zhang, Hong and Zhang, Junchao},
	title = {Toward performance-portable {PETSc} for {GPU}-based exascale systems},
	year = {2021},
	month = {12},
	journal = {Parallel Computing},
	volume = {108},
	numpages = {102831},
	publisher = {Elsevier BV},
	doi = {10.1016/j.parco.2021.102831},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S016781912100079X},
	issn = {0167-8191},
	keywords = {software, CUDA, C++},
}

% DESDEO an open source Python framework for implementing interactive multiobjective optimization solvers
@article{misitano2021desdeo,
	author = {Misitano, Giovanni and Saini, Bhupinder S. and Afsar, Bekir and Shavazipour, Babooshka and Miettinen, Kaisa},
	title = {{DESDEO}: The Modular and Open Source Framework for Interactive Multiobjective Optimization},
	year = {2021},
	journal = {IEEE Access},
	volume = {9},
	pages = {148277--148295},
	publisher = {Institute of Electrical and Electronics Engineers (IEEE)},
	doi = {10.1109/ACCESS.2021.3123825},
	url = {https://ieeexplore.ieee.org/document/9591595},
	issn = {2169-3536},
	keywords = {software, open source, OSS, Python},
}

% MORDRED: A 3D molecular descriptor calculator, which is widely used for embedding molecules into a continuous latent space (parameterized by their descriptors) which can be used to solve chemical property optimization problems. The MORDRED software is available open source in Python.
@article{moriwaki2018mordred,
	author = {Moriwaki, Hirotomo and Tia, Yu-Shi and Kawashita, Norihito and Takagi, Tatsuya},
	title = {Mordred: a molecular descriptor calculator},
	year = {2018},
	month = {12},
	journal = {Journal of Cheminformatics},
	volume = {10},
	number = {1},
	articleno = {4},
	numpages = {14},
	publisher = {Springer Science and Business Media LLC},
	doi = {10.1186/s13321-018-0258-y},
	url = {https://jcheminf.biomedcentral.com/articles/10.1186/s13321-018-0258-y},
	issn = {1758-2946},
	keywords = {software, open source, OSS, Python},
}

% This is the last TAO (toolkit for advanced optimization) reference before this open source numerical simulation optimization software when merged with PETSc, into a single PETSc + TAO release
@techreport{munson2015tao,
	author = {Munson, Todd and Sarich, Jason and Wild, Stefan and Benson, Steven and McInnes, Lois Curfman},
	title = {{TAO} 3.5 Users Manual},
	year = {2015},
	number = {ANL/MCS-TM-322 version 3.5},
	institution = {Argonne National Laboratory},
	address = {Lemont, IL, USA},
	url = {https://www.mcs.anl.gov/petsc/petsc-3.5.4/docs/tao_manual.pdf},
	keywords = {software, open source, OSS, C++},
}

% The official publication for the latest version of the VTR (verilog-to-routing) toolkit. The latest publication focuses on updates to the user interface and new features and support, but not algorithmic changes. VTR is currently the standard in open source placement and routing software, written primarilly in C++ with a Python interface, available for download at: github.com/verilog-to-routing/vtr-verilog-to-routing
@article{murray2020vtr,
	author = {Murray, Kevin E. and Petelin, Oleg and Zhong, Sheng and Wang, Jia Min and Eldafrawy, Mohamed and Legault, Jean-Philippe and Sha, Eugene and Graham, Aaron G. and Wu, Jean and Walker, Matthew J. P. and Zeng, Hanqing and Patros, Panagiotis and Luu, Jason and Kent, Kenneth B. and Betz, Vaughn},
	title = {{VTR} 8: High-performance {CAD} and Customizable {FPGA} Architecture Modelling},
	year = {2020},
	month = {6},
	journal = {ACM Trans. Reconfigurable Technol. Syst.},
	volume = {13},
	number = {2},
	articleno = {9},
	numpages = {55},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	doi = {10.1145/3388617},
	url = {https://doi.org/10.1145/3388617},
	issn = {1936-7406},
	keywords = {software, open source, OSS, C++, Verilog},
}

% NVIDIA's official API docs for the latest version (as of Apr 2025) of the cuBLAS API. With both C and Fortran bindings.
@techreport{nvidiacorporation2025cublas,
	author = {NVIDIA~Corporation, },
	title = {{cuBLAS API}},
	year = {2025},
	number = {Release 12.8},
	institution = {NVIDIA Corporation},
	url = {https://docs.nvidia.com/cuda/pdf/CUBLAS_Library.pdf},
	note = {Last accessed: Apr 26, 2025},
	keywords = {software, C, Fortran, CUDA},
}

% NVIDIA's official developer's guide and API for writing high-performance CUDA in Fortran95+ on compilers that support the CUDA API, such as Nvidia's nvcc family of compilers and Portland group's pgfrotran family.
@techreport{nvidiahpccompilers2025cuda,
	author = {NVIDIA~HPC~Compilers, },
	title = {{CUDA Fortran} programming guide},
	year = {2025},
	number = {Version 23.3},
	institution = {NVIDIA Corporation},
	url = {https://docs.nvidia.com/hpc-sdk/archive/23.3/pdf/hpc233cudaforug.pdf},
	note = {Last accessed: Apr 26, 2023},
	keywords = {software, Fortran, CUDA},
}

% SCS is an open source numerical software for solving second-order cone problems from Stephen Boyd's lab
@article{odonoghue2016conic,
	author = {O'Donoghue, Brendan and Chu, Eric and Parikh, Neal and Boyd, Stephen},
	title = {Conic Optimization via Operator Splitting and Homogeneous Self-Dual Embedding},
	year = {2016},
	month = {June},
	journal = {Journal of Optimization Theory and Applications},
	volume = {169},
	number = {3},
	pages = {1042--1068},
	publisher = {Springer Science and Business Media LLC},
	doi = {10.1007/s10957-016-0892-3},
	url = {http://link.springer.com/10.1007/s10957-016-0892-3},
	issn = {0022-3239},
	keywords = {software, open source, OSS, C++},
}

% OpenMP 4.5 standard: Official definition of OpenMP 4.5 software standard
@techreport{openmp2015openmp,
	author = {OpenMP, Architecture Review Board},
	title = {{OpenMP} Application Programming Interface},
	year = {2015},
	month = {November},
	number = {version 4.5},
    url = {https://www.openmp.org/wp-content/uploads/openmp-4.5.pdf},
	keywords = {software, OpenMP, parallel programming, C, Fortran},
}

% Official docs and reference for the Matlab computational geometry toolbox (numerical software), which includes all of Matlab's built-in tools for computing geometric algorithms and structures, including Delaunay triangulations
@techreport{papazafeiropoulos2014matlab,
	author = {Papazafeiropoulos, George},
	title = {{MATLAB} Computational Geometry Toolbox version 1.2},
	year = {2014},
	month = {November},
	institution = {MathWorks},
	url = {https://www.mathworks.com/matlabcentral/fileexchange/48509-computational-geometry-toolbox},
	note = {Last accessed: April 27, 2020},
	keywords = {software, Matlab},
}

% The official publication for pytorch a gold standard in open source software, providing automatic differentiation and numerical linear algebra in Python, targeted at implementing deep learning algorithms. Pytorch is pretty much a standard in not just open source software, but also machine learning software, and also numerical software
@inproceedings{paszke2019pytorch,
	author = {Paszke, Adam and Gross, Sam and Massa, Francisco and Lerer, Adam and Bradbury, James and Chanan, Gregory and Killeen, Trevor and Lin, Zeming and Gimelshein, Natalia and Antiga, Luca and Desmaison, Alban and Kopf, Andreas and Yang, Edward and DeVito, Zachary and Raison, Martin and Tejani, Alykhan and Chilamkurthy, Sasank and Steiner, Benoit and Fang, Lu and Bai, Junjie and Chintala, Soumith},
	editor = {Wallach, H. and Larochelle, H. and Beygelzimer, A. and Alch\'{e}-Buc, F. d\textquotesingle and Fox, E. and Garnett, R.},
	title = {{PyTorch}: An Imperative Style, High-Performance Deep Learning Library},
	year = {2019},
	booktitle = {Advances in Neural Information Processing Systems},
	volume = {32},
	pages = {1--12},
	organization = {Curran Associates, Inc.},
	url = {https://proceedings.neurips.cc/paper/2019/file/bdbca288fee7f92f2bfa9f7012727740-Paper.pdf},
	keywords = {software, open source, OSS, Python, C++, CUDA},
}

% The official publication for scikit-learn a gold standard in open source software, providing a clean interface to several standard implementations of numerical approximation, optimization, machine learning, and deep learning algorithms. Scikit-learn is pretty much a standard in not just open source software, but also machine learning software, and also numerical software
@article{pedregosa2011scikitlearn,
	author = {Pedregosa, Fabian and Varoquaux, Ga{\"e}l and Gramfort, Alexandre and Michel, Vincent and Thirion, Bertrand and Grisel, Olivier and Blondel, Mathieu and Prettenhofer, Peter and Weiss, Ron and Dubourg, Vincent and others, },
	title = {Scikit-learn: Machine learning in {P}ython},
	year = {2011},
	journal = {Journal of Machine Learning Research},
	volume = {12},
	pages = {2825--2830},
	url = {https://www.jmlr.org/papers/volume12/pedregosa11a/pedregosa11a.pdf},
	keywords = {software, open source, OSS, Python},
}

% The official handbook and user's manual for the high-performance LINPACK benchmark (HPL) describing how to set-up and run the HPC performance tuning benchmark on distributed-memory systems, what problem it solves, what values the config file sets, and what are the rules for defining a solver for the problem and having it still count toware the Top 500 list
@book{petitet2018hpl,
	author = {Petitet, Antoine and Whaley, R. Clint and Dongarra, Jack and Cleary, Andy},
	title = {{HPL -- A Portable Implementation of the High-Performance Linpack Benchmark for Distributed-Memory Computers}},
	year = {2018},
	publisher = {Innovation Computing Laboratory, University of Tennessee},
    url = {https://www.netlib.org/benchmark/hpl/},
	keywords = {software, Fortran, parallel programming, benchmarking},
}

% YAHPO gym is yet another hyperparameter optimization gym consisting of benchmark and test problems for testing neural architecture search and hyperparameter optimization algorithms. Most of the test problems are based on xgboost, knn, or svm models of real data. As of 2022, this one was not as mature as HPOBench and JAHS-Bench, so we didn't use it. They claim to now offer multiobjective optimization test problems as well. Open source Python software implementation available at: github.com/slds-lmu/yahpo_gym
@inproceedings{pfisterer2022yahpo,
	author = {Pfisterer, Florian and Schneider, Lennart and Moosbauer, Julia and Binder, Martin and Bischl, Bernd},
	editor = {Guyon, Isabelle and Lindauer, Marius and van der Schaar, Mihaela and Hutter, Frank and Garnett, Roman},
	title = {{YAHPO} Gym - An Efficient Multi-Objective Multi-Fidelity Benchmark for Hyperparameter Optimization},
	year = {2022},
	booktitle = {Proceedings of the First International Conference on Automated Machine Learning},
	series = {Proceedings of Machine Learning Research},
	volume = {188},
	pages = {3/1--39},
	organization = {PMLR},
	url = {https://proceedings.mlr.press/v188/pfisterer22a.html},
	keywords = {software, open source, OSS, Python},
}

% Experiences, challenges, and techniques for integrating the blackbox optimization solvers VTDIRECT95 and QNSTOP into the parallel service architecture SORCER
@inproceedings{raghunath2017global,
	author = {Raghunath, Chaitra and Chang, Tyler H. and Watson, Layne T. and Jrad, Mohamad and Kapania, Rakesh K. and Kolonay, Raymond M.},
	title = {Global deterministic and stochastic optimization in a service oriented architecture},
	year = {2017},
	booktitle = {Proc. 2017 Spring Simulation Conference (SpringSim 2017), the 25th High Performance Computing Symposium (HPC '17)},
	numpages = {7},
	organization = {SCS},
	location = {Virginia Beach, VA, USA},
	doi = {10.22360/springsim.2017.hpc.023},
	url = {http://dl.acm.org/citation.cfm?id=3108103},
	keywords = {software, parallel programming, Fortran, C, Java},
}

% PDFO: An open source modern Python implementation of Powell's derivative-free numerical optimization software suite, which is considered to be the standard (baseline) in derivative-free optimization solvers
@misc{ragonneau2021pdfo,
	author = {Ragonneau, Tom M. and Zhang, Zaikun},
	title = {{PDFO}: Cross-Platform Interfaces for {P}owell’s Derivative-Free Optimization Solvers},
	year = {2021},
	booktitle = {GitHub repository},
	number = {1.2},
	publisher = {GitHub},
	url = {https://github.com/pdfo/pdfo},
	note = {Last accessed: Apr 2025},
	keywords = {software, open source, OSS, Python},
}

% DREAMPlaceFPGA the official publication for the DREAMPlace open source using analytical placement with some deep learning for FPGA placement acceleration -- written in C++ with Python interfaces and available at github.com/rachelselinar/DREAMPlaceFPGA
@inproceedings{rajarathnam2022dreamplacefpga,
	author = {Rajarathnam, Rachel Selina and Alawieh, Mohamed Baker and Jiang, Zixuan and Iyer, Mahesh and Pan, David Z.},
	title = {{DREAMPlaceFPGA}: An Open-Source Analytical Placer for Large Scale Heterogeneous {FPGAs} using Deep-Learning Toolkit},
	year = {2022},
	month = {1},
	booktitle = {2022 27th Asia and South Pacific Design Automation Conference (ASP-DAC)},
	volume = {},
	number = {},
	pages = {300--306},
	organization = {IEEE},
	location = {Taipei, Taiwan},
	doi = {10.1109/ASP-DAC52403.2022.9712562},
	url = {https://ieeexplore.ieee.org/document/9712562/},
	keywords = {software, open source, OSS, Python, C++},
}

% The original publication for VTR (Verilog-to-routing) -- open-source synthesis-packing-place-and-route platform. Still uses VPR for the place and route steps. VTR is currently the standard in open source placement and routing software, written primarilly in C++ with a Python interface, available for download at: github.com/verilog-to-routing/vtr-verilog-to-routing
@inproceedings{rose2012vtr,
	author = {Rose, Jonathan and Luu, Jason and Yu, Chi Wai and Densmore, Opal and Goeders, Jeffrey and Somerville, Andrew and Kent, Kenneth B. and Jamieson, Peter and Anderson, Jason},
	title = {The {VTR} project: architecture and {CAD} for {FPGAs} from verilog to routing},
	year = {2012},
	month = {2},
	booktitle = {Proceedings of the ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
	series = {FPGA '12},
	numpages = {10},
	organization = {Association for Computing Machinery},
	location = {Monterey, California, USA},
	doi = {10.1145/2145694.2145708},
	url = {https://doi.org/10.1145/2145694.2145708},
	isbn = {9781450311557},
	keywords = {software, open source, OSS, Python, C++},
}

% Official publication of the scipy.stats.qmc module, which is the newly released module for performing quasi-monte carlo sampling and design-of-experiments in scipy. Scipy is an open source numerical software package which is the standard for advanced numerical methods and scientific software packages in Python. Most of scipy are wrappers for much older Fortran or C++ code, that has been highly optimized.
@article{roy2023quasimonte,
	author = {Roy, Pamphile T. and Owen, Art B. and Balandat, Maximilian and Haberland, Matt},
	title = {Quasi-Monte Carlo Methods in Python},
	year = {2023},
	month = {4},
	journal = {Journal of Open Source Software},
	volume = {8},
	number = {84},
	numpages = {5309},
	publisher = {The Open Journal},
	doi = {10.21105/joss.05309},
	url = {https://joss.theoj.org/papers/10.21105/joss.05309},
	issn = {2475-9066},
	keywords = {software, open source, OSS, Fortran, Python},
}

% The SMT 2.0 paper, major improvements to the open source numerical software package (in Python) pySMT for solving multidisciplinary engineering design optimization (MDO) problems, while utilizing derivatives and providing numerical stability analysis for each surrogate model class. In SMT 2.0, support is added for hierarchical and mixed variables, and major improvements have been made to the structure, completeness, and features of the SMT library.
@article{saves2024smt,
	author = {Saves, Paul and Lafage, Rémi and Bartoli, Nathalie and Diouane, Youssef and Bussemaker, Jasper and Lefebvre, Thierry and Hwang, John T. and Morlier, Joseph and Martins, Joaquim R.R.A.},
	title = {SMT 2.0: A Surrogate Modeling Toolbox with a focus on hierarchical and mixed variables Gaussian processes},
	year = {2024},
	month = {2},
	journal = {Advances in Engineering Software},
	volume = {188},
	numpages = {103571},
	publisher = {Elsevier BV},
	doi = {10.1016/j.advengsoft.2023.103571},
	url = {https://www.sciencedirect.com/science/article/pii/S096599782300162X},
	issn = {0965-9978},
	keywords = {software, open source, OSS, Python},
}

% ASTRO-DF is a derivative-free stochastic optimization solver, targeted at noisy simulation optimization problems. Particularly those derived from Monte Carlo simulations. The algorithm is model-based within a trust region. The key contribution is adaptively determining how many Monte carlo samples to take in each iteration, in order to guarantee convergence. There are also ASTRO and ASTRO-C variants available. The open source Python software is available at github.com/sshashaa/astro-df
@inproceedings{shashaani2016astrodf,
	author = {Shashaani, Sara and Hunter, Susan R. and Pasupathy, Raghu},
	title = {ASTRO-DF: Adaptive sampling trust-region optimization algorithms, heuristics, and numerical experience},
	year = {2016},
	month = {12},
	booktitle = {2016 Winter Simulation Conference (WSC)},
	pages = {554--565},
	organization = {IEEE},
	location = {Washington, DC, USA},
	doi = {10.1109/WSC.2016.7822121},
	url = {http://ieeexplore.ieee.org/document/7822121/},
	keywords = {software, open source, OSS, Python},
}

% The EDBO software: open source Python software for performing multiobjective bayesian optimization for chemical synthesis and molecular discovery. Links a multiobjective optimization solver with the MORDRED software for getting molecular descriptors and optimizes for the desired properties
@article{shields2021bayesian,
	author = {Shields, Benjamin J. and Stevens, Jason and Li, Jun and Parasram, Marvin and Damani, Farhan and Alvarado, Jesus I. M. and Janey, Jacob M. and Adams, Rryan P. and Doyle, Abigail G.},
	title = {Bayesian reaction optimization as a tool for chemical synthesis},
	year = {2021},
	month = {2},
	journal = {Nature},
	volume = {590},
	number = {7844},
	pages = {89--96},
	publisher = {Springer Science and Business Media LLC},
	doi = {10.1038/s41586-021-03213-y},
	url = {https://www.nature.com/articles/s41586-021-03213-y},
	issn = {0028-0836},
	git = {http://github.com/b-shields/edbo},
	keywords = {software, open source, OSS, Python},
}

% The docker image for the SUPERFISH/POISSON container + wrapper -- we used this at Argonne to obtain a portable copy of POISSON/SUPERFISH when performing particle accelerator RF gun cavity optimization and distributing work on remote systems
@misc{slepicka2020poisson,
	author = {Slepicka, Hugo},
	title = {Poisson Superfish via Docker},
	year = {2020},
	url = {https://github.com/hhslepicka/docker-poisson-superfish-nobin},
	note = {Last accessed: Aug 2023},
	keywords = {software, Fortran, Kubernetes},
}

% The FAIR principles of data management: Scientific data should be findable, accessible, interpretable, and reproducible
@article{stall2019make,
	author = {Stall, Shelley and Yarmey, Lynn and Cutcher-Gershenfeld, Joel and Hanson, Brooks and Lehnert, Kerstin and Nosek, Brian and Parsons, Mark and Robinson, Erin and Wyborn, Lesley},
	title = {Make scientific data {FAIR}},
	year = {2019},
	month = {6},
	journal = {Nature},
	volume = {570},
	number = {7759},
	pages = {27--29},
	publisher = {Nature Publishing Group},
	doi = {10.1038/d41586-019-01720-7},
	url = {https://www.nature.com/articles/d41586-019-01720-7},
	issn = {0028-0836},
	keywords = {software},
}

% OSQP is an open source numerical software for solving quadratic programming problems from Stephen Boyd's lab
@article{stellato2020osqp,
	author = {Stellato, Bartolomeo and Banjac, Goran and Goulart, Paul and Bemporad, Alberto and Boyd, Stephen},
	title = {{OSQP}: an operator splitting solver for quadratic programs},
	year = {2020},
	month = {12},
	journal = {Mathematical Programming Computation},
	volume = {12},
	number = {4},
	pages = {637--672},
	publisher = {Springer Science and Business Media LLC},
	doi = {10.1007/s12532-020-00179-2},
	url = {http://link.springer.com/10.1007/s12532-020-00179-2},
	issn = {1867-2949},
	keywords = {software, open source, OSS, C++},
}

% BoostDMS is numerical software library providing access to Custodio's direct search and pattern search software, including MultiGLODS and DMS, in Matlab with full parallel computing support
@article{tavares2022parallel,
	author = {Tavares, S. and Br\'as, C. P. and Cust\'odio, A. L. and Duarte, V. and Medeiros, P.},
	title = {Parallel Strategies for Direct Multisearch},
	year = {2022},
	month = {3},
	journal = {Numerical Algorithms},
	volume = {92},
	number = {3},
	pages = {1757--1788},
	publisher = {Springer Science and Business Media LLC},
	doi = {10.1007/s11075-022-01364-1},
	url = {https://link.springer.com/10.1007/s11075-022-01364-1},
	issn = {1017-1398},
	keywords = {software, Matlab, parallel programming},
}

% The SHEPPACK numerical software package contains a variety of open source Fortran codes for computing Shepard's method interpolants in two, three, and four dimensions. There is also a linear Shepard's method interpolant that can be used for interpolation in arbitrary dimension.
@article{thacker2010algorithm,
	author = {Thacker, William I. and Zhang, Jingwei and Watson, Layne T. and Birch, Jeffrey B. and Iyer, Manjula A. and Berry, Michael W.},
	title = {Algorithm 905: {SHEPPACK}: {M}odified {S}hepard algorithm for interpolation of scattered multivariate data},
	year = {2010},
	month = {9},
	journal = {ACM Transactions on Mathematical Software},
	volume = {37},
	number = {3},
	numpages = {34},
	publisher = {Association for Computing Machinery (ACM)},
	doi = {10.1145/1824801.1824812},
	url = {https://dl.acm.org/doi/10.1145/1824801.1824812},
	issn = {0098-3500},
	keywords = {software, open source, OSS, Fortran},
}

% An open source MATLAB platform for implementing and running wide-scale comparisons against other multiobjective evolutionary algorithms on standard multiobjective test problems
@article{tian2017platemo,
	author = {Tian, Ye and Cheng, Ran and Zhang, Xingyi and Jin, Yaochu},
	title = {{PlatEMO}: A {MATLAB} Platform for Evolutionary Multi-Objective Optimization [Educational Forum]},
	year = {2017},
	month = {11},
	journal = {IEEE Computational Intelligence Magazine},
	volume = {12},
	number = {4},
	pages = {73--87},
	publisher = {Institute of Electrical and Electronics Engineers (IEEE)},
	doi = {10.1109/MCI.2017.2742868},
	url = {http://ieeexplore.ieee.org/document/8065138},
	issn = {1556-603X},
	keywords = {software, open source, OSS, Matlab},
}

% Kokkos 3 latest paper from Sandia's CCR lab -- an open source, parallel computing software library for performance portable parallel and distributed computing in C++. Primarily designed and used for high-performance numerical software, e.g., Trilinos
@article{trott2022kokkos,
	author = {Trott, Christian R. and Lebrun-Grandié, Damien and Arndt, Daniel and Ciesko, Jan and Dang, Vinh and Ellingwood, Nathan and Gayatri, Rahulkumar and Harvey, Evan and Hollman, Daisy S. and Ibanez, Dan and Liber, Nevin and Madsen, Jonathan and Miles, Jeff and Poliakoff, David and Powell, Amy and Rajamanickam, Sivasankaran and Simberg, Mikael and Sunderland, Dan and Turcksin, Bruno and Wilke, Jeremiah},
	title = {Kokkos 3: Programming Model Extensions for the Exascale Era},
	year = {2022},
	month = {4},
	journal = {IEEE Transactions on Parallel and Distributed Systems},
	volume = {33},
	number = {4},
	pages = {805--817},
	publisher = {Institute of Electrical and Electronics Engineers (IEEE)},
	doi = {10.1109/TPDS.2021.3097283},
	url = {https://ieeexplore.ieee.org/document/9485033/},
	issn = {1045-9219},
	keywords = {software, open source, OSS, parallel programming},
}

% Original publication of t-SNE, which performs latent space embedding and dimension reduction for high-dimensional data. The idea is to minimize the distribution error via KL-divergence between a target distribution and the a low-dimensional embedding of that distribution that is trained via gradient descent. The KL-divergence is calculated based on a similarity score between points in the target distribution (which perfectly maintains the relative distances / exponentiated relative distances between points in the original high-dimensional space) and the low-dimensional embedding, so the objective is ultimately to maintain the relative distances between points in the embedding. The method was originally proposed as a visualization technique for high-dimensional data (where the embedding produces clusters in 2 or 3 dimensions that can be plotted), but t-SNE can be and is also used for generic dimension reduction and latent-space embedding. The original software is not open source, but many open source implementations are linked on the original author's website: lvdmaaten.github.io/tsne
@article{vandermaaten2008visualizing,
	author = {van der Maaten, Laurens and Hinton, Geoffrey},
	title = {Visualizing Data using {t-SNE}},
	year = {2008},
	journal = {Journal of Machine Learning Research},
	volume = {9},
	number = {86},
	pages = {2579--2605},
	url = {http://jmlr.org/papers/v9/vandermaaten08a.html},
	keywords = {software, open source, OSS, C, C++, Python, Java, Julia, Matlab, CUDA},
}

% The (recently open source) numerical software library SLATEC from Sandia is something of a precursor to a modern library like scipy. SLATEC provides highly optimized, numerically stable, Fortran implementations for nearly every basic numerical algorithm that one would encounter in scientific computing
@article{vandevender1982slatec,
	author = {Vandevender, Walter H. and Haskell, Karen H.},
	title = {The {SLATEC} Mathematical Subroutine Library},
	year = {1982},
	month = {9},
	journal = {SIGNUM Newsletter},
	volume = {17},
	number = {3},
	pages = {16--21},
	publisher = {Association for Computing Machinery (ACM)},
	doi = {10.1145/1057594.1057595},
	url = {https://dl.acm.org/doi/10.1145/1057594.1057595},
	issn = {0163-5778},
	keywords = {software, open source, OSS, Fortran},
}

% SciPy official publication: Scipy is an open source numerical software package which is the standard for advanced numerical methods and scientific software packages in Python. Most of scipy are wrappers for much older Fortran or C++ code, that has been highly optimized.
@article{virtanen2020scipy,
	author = {Virtanen, Pauli and Gommers, Ralf and Oliphant, Travis E. and Haberland, Matt and Reddy, Tyler and Cournapeau, David and Burovski, Evgeni and Peterson, Pearu and Weckesser, Warren and Bright, Jonathan and van der Walt, St{\'e}fan J. and Brett, Matthew and Wilson, Joshua and Jarrod Millman, K. and Mayorov, Nikolay and Nelson, Andrew R.~J. and Jones, Eric and Kern, Robert and Larson, Eric and Carey, CJ and Polat, {\.I}lhan and Feng, Yu and Moore, Eric W. and VanderPlas, Jake and Laxalde, Denis and Perktold, Josef and Cimrman, Robert and Henriksen, Ian and Quintero, E.~A. and Harris, Charles R and Archibald, Anne M. and Ribeiro, Ant{\^o}nio H. and Pedregosa, Fabian and van Mulbregt, Paul and Contributors, SciPy 1.0},
	title = {{SciPy} 1.0: {F}undamental Algorithms for Scientific Computing in {P}ython},
	year = {2020},
	month = {3},
	journal = {Nature Methods},
	volume = {17},
	number = {3},
	pages = {261--272},
	publisher = {Springer Science and Business Media LLC},
	doi = {10.1038/s41592-019-0686-2},
	url = {https://www.nature.com/articles/s41592-019-0686-2},
	issn = {1548-7091},
	keywords = {software, open source, OSS, Fortran, C++, Python},
}

% Chapter on how to bind an older version of TBB to NUMA nodes using Intel's TBB C++ software interface
@inbook{voss2019tbb,
	author = {Voss, Michael and Asenjo, Rafael and Reinders, James},
	title = {{TBB} on {NUMA} Architectures},
	year = {2019},
	booktitle = {Pro {TBB}: {C++} Parallel Programming with Threading Building Blocks},
	pages = {581--604},
	publisher = {Apress},
	address = {Berkeley, CA},
	doi = {10.1007/978-1-4842-4398-5_20},
	url = {https://doi.org/10.1007/978-1-4842-4398-5_20},
	isbn = {978-1-4842-4398-5},
	keywords = {software, C++, parallel programming},
}

% VTR docs with a bit more detail than above reference, and latest version (most up-to-date) information VTR is currently the standard in open source placement and routing software, written primarilly in C++ with a Python interface, available for download at: github.com/verilog-to-routing/vtr-verilog-to-routing
@misc{vtrdevelopers2024verilogtorouting,
	author = {VTR~Developers, },
	title = {Verilog-to-routing documentation},
	year = {2024},
	number = {Version 8.1.0-dev},
	url = {https://readthedocs.org/projects/vtr/downloads/pdf/latest},
	note = {Last accessed: Feb 2025},
	keywords = {software, open source, OSS, Python, C++},
}

% Open source numerical Python software pyomo.DOE, implementing model-driven design-of-experiments generation in Pyomo
@article{wang2022pyomodoe,
	author = {Wang, Jialu and Dowling, Alexander W.},
	title = {Pyomo.DOE: An open-source package for model-based design of experiments in Python},
	year = {2022},
	month = {12},
	journal = {AIChE Journal},
	volume = {68},
	number = {12},
	articleno = {e17813},
	publisher = {Wiley},
	doi = {10.1002/aic.17813},
	url = {https://aiche.onlinelibrary.wiley.com/doi/10.1002/aic.17813},
	issn = {0001-1541},
	keywords = {software, Python},
}

% The latest release of HOMPACK: An open source numerical software package written in Fortran 90 for solving nonlinear and polynomial systems of equations via homotopy methods.
@article{watson1997algorithm,
	author = {Watson, Layne T and Sosonkina, Maria and Melville, Robert C and Morgan, Alexander P and Walker, Homer F},
	title = {Algorithm 777: HOMPACK90: A suite of Fortran 90 codes for globally convergent homotopy algorithms},
	year = {1997},
	month = {12},
	journal = {ACM Transactions on Mathematical Software (TOMS)},
	volume = {23},
	number = {4},
	pages = {514--549},
	publisher = {ACM},
	doi = {10.1145/279232.279235},
	url = {https://dl.acm.org/doi/10.1145/279232.279235},
	issn = {0098-3500},
	keywords = {software, open source, OSS, Fortran},
}

% How optimization is used to autotune the configuration of the BLAS subroutines and kernels for the ATLAS project -- since most numerical software relies on BLAS, it is often prudent to spend time optimizing BLAS configurations (such as matrix block sizes, etc.) to match machine specific values (such as cache sizes, etc.) when installing on a HPC that will have a high numerical (compute bound) workload. This can be done automatically via numerical optimization, so that users can just run the ATLAS setup scripts to configure BLAS automatically if they want an optimized installation -- could also be considered an early example of performance portability
@article{whaley2001automated,
	author = {Whaley, R. Clint and Petitet, Antoine and Dongarra, Jack J.},
	title = {Automated empirical optimizations of software and the {ATLAS} project},
	year = {2001},
	month = {1},
	journal = {Parallel Computing},
	volume = {27},
	number = {1--2},
	pages = {3--35},
	publisher = {Elsevier BV},
	doi = {10.1016/s0167-8191(00)00087-9},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0167819100000879},
	issn = {0167-8191},
	keywords = {software, parallel programming},
}

% Official publication for ytopt: Argonne's HPC and scientific library autotuning software using Bayesian optimization to portably autotune numerical libraries for optimal performance on a given HPC as part of the exasale computing project. The software uses a random forest surrogate model and calculates their model-form uncertainties through resampling models. Then, they use random sampling of their acquisition function to perform Bayesian optimization at scale with fully distributed evaluation of the selected configurations. The results scale well on the HPCs Theta and Summit. The open source Python software is available at github.com/ytopt-team/ytopt
@article{wu2025ytopt,
	author = {Wu, Xingfu and Balaprakash, Prasanna and Kruse, Michael and Koo, Jaehoon and Videau, Brice and Hovland, Paul and Taylor, Valerie and Geltz, Brad and Jana, Siddhartha and Hall, Mary},
	title = {ytopt: Autotuning Scientific Applications for Energy Efficiency at Large Scales},
	year = {2025},
	month = {1},
	journal = {Concurrency and Computation: Practice and Experience},
	volume = {37},
	number = {1},
	articleno = {e8322},
	publisher = {Wiley},
	doi = {10.1002/cpe.8322},
	url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/cpe.8322},
	issn = {1532-0626},
	keywords = {software, open source, OSS, Python},
}

% DREAMPlaceFPGA-MP: GPU-accelerated macro-placer for DREAMPlaceFPGA (rajrathnam2022) DREAMPlace is an open source using analytical placement with some deep learning for FPGA placement acceleration -- written in C++ with Python interfaces and available at github.com/rachelselinar/DREAMPlaceFPGA
@techreport{xiong2023dreamplacefpgamp,
	author = {Xiong, Zhili and Rajarathnam, Rachel Selina and Jiang, Zhixing and Zhu, Hanqing and Pan, David Z.},
	title = {{DREAMPlaceFPGA-MP}: An Open-Source {GPU}-Accelerated Macro Placer for Modern {FPGAs} with Cascade Shapes and Region Constraints},
	year = {2023},
	institution = {arXiv cs.AR preprint},
	url = {https://arxiv.org/abs/2311.08582},
	keywords = {software, open source, OSS, Python, CUDA, C++},
}

% Prima: open source reference implementation of all of Powell's numerical optimization solvers for blackbox / simulation optimization problems in modern Fortran. IMO, these should be considered the state-of-the-art and reference implementations for all blackbox optimization research
@misc{zhang2023prima,
	author = {Zhang, Zaikun},
	title = {{PRIMA: Reference Implementation for Powell's Methods with Modernization and Amelioration}},
	year = {2023},
	howpublished = {github repository},
	doi = {10.5281/zenodo.8052654},
	url = {http://www.libprima.net},
	note = {Last accessed: Apr 2025},
	keywords = {software, open source, OSS, Fortran},
}

% The original publication for L-BFGS-B software, which solves bound-constrained optimization problems using a limited-memory BFGS. This is the standard implementation that is used in all L-BFGS-B codes to date, such as scipy, all machine learning codes, and most engineering codes and nonlinear systems solvers. The code is open source high-quality numerical software, written in old-style Fortran
@article{zhu1997algorithm,
	author = {Zhu, Ciyou and Byrd, Richard H. and Lu, Peihuang and Nocedal, Jorge},
	title = {Algorithm 778: {L-BFGS-B}: {F}ortran Subroutines for Large-Scale Bound-Constrained Optimization},
	year = {1997},
	month = {12},
	journal = {ACM Transactions on Mathematical Software},
	volume = {23},
	number = {4},
	pages = {550--560},
	publisher = {ACM},
	doi = {10.1145/279232.279236},
	url = {https://dl.acm.org/doi/10.1145/279232.279236},
	issn = {0098-3500},
	keywords = {software, open source, OSS, Fortran},
}

